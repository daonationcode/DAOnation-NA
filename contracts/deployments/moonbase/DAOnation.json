{
  "address": "0xE253b4D3C0bB27330d9787363073C005365c82D4",
  "abi": [
    {
      "inputs": [],
      "name": "_dao_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_donations",
      "outputs": [
        {
          "internalType": "string",
          "name": "ideas_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_donations_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feed_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feed_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_goal_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_goal_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "goal_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "goal_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "donation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ideas_vote_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_join_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_joined_person",
      "outputs": [
        {
          "internalType": "string",
          "name": "daoId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joined_date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_message_read_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reply_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_smart_contract_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_smart_contracts_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "smart_contract_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "smart_contract_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_template_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_user_badges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dao",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "joined",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "goal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "ideas",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "donation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "comment",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "reply",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feed_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        }
      ],
      "name": "add_Feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed2",
          "type": "string"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "string",
          "name": "goal_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ideas_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sender",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_read_messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_replies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reply_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ideas_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "feed_add",
          "type": "bool"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_goal_id",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_smart_contracts",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ideas_id",
          "type": "string"
        }
      ],
      "name": "getMsgIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "getReadMsg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "message_id",
          "type": "uint256"
        }
      ],
      "name": "getReplyIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_id",
          "type": "string"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        }
      ],
      "name": "get_person_joinedID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        }
      ],
      "name": "is_person_joined",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "person",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "joined_date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "join_community",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "join_id",
          "type": "uint256"
        }
      ],
      "name": "leave_community",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sender",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        }
      ],
      "name": "sendMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wallet",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "msg_type",
          "type": "string"
        }
      ],
      "name": "sendReadMsg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_message_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reply",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_userid",
          "type": "uint256"
        }
      ],
      "name": "sendReply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_template",
          "type": "string"
        }
      ],
      "name": "update_template",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25f1a8b60519f45f5291ef4411171321907b7a028640d4f80526da8bd12afbf4",
  "receipt": {
    "to": null,
    "from": "0x610Cd980BeF747451152e8F0fF16A19A451F7a43",
    "contractAddress": "0xE253b4D3C0bB27330d9787363073C005365c82D4",
    "transactionIndex": 0,
    "gasUsed": "7272786",
    "logsBloom": "0x
    "blockHash": "0x491660592cf12be25ae08aa30ee3011ec8533f46c2f9e2e7f2ddba7cfd547096",
    "transactionHash": "0x25f1a8b60519f45f5291ef4411171321907b7a028640d4f80526da8bd12afbf4",
    "logs": [],
    "blockNumber": 6958677,
    "cumulativeGasUsed": "7272786",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "bbe0b6c543aea099adf7a26893de1b01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_dao_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ideas_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_donations_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feed_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_goal_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_goal_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"goal_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ideas_vote_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_join_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_joined_person\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"daoId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joined_date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_message_read_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reply_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_smart_contract_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_smart_contracts_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"smart_contract_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"smart_contract_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_template_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_user_badges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dao\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"goal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ideas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"donation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"comment\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"reply\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feed_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"add_Feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed2\",\"type\":\"string\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"goal_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ideas_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sender\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_read_messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_replies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reply_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ideas_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"feed_add\",\"type\":\"bool\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_goal_id\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_smart_contracts\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ideas_id\",\"type\":\"string\"}],\"name\":\"getMsgIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"getReadMsg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"message_id\",\"type\":\"uint256\"}],\"name\":\"getReplyIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_id\",\"type\":\"string\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"}],\"name\":\"get_person_joinedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"}],\"name\":\"is_person_joined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"person\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"joined_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"join_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"join_id\",\"type\":\"uint256\"}],\"name\":\"leave_community\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sender\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"sendMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg_type\",\"type\":\"string\"}],\"name\":\"sendReadMsg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_message_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reply\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userid\",\"type\":\"uint256\"}],\"name\":\"sendReply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_template\",\"type\":\"string\"}],\"name\":\"update_template\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAOnation.sol\":\"DAOnation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DAOnation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract DAOnation {\\r\\n  struct dao_uri_struct {\\r\\n    string dao_wallet;\\r\\n    string dao_uri;\\r\\n    string finished;\\r\\n  }\\r\\n  struct goal_uri_struct {\\r\\n    string dao_id;\\r\\n    string goal_uri;\\r\\n  }\\r\\n\\r\\n  struct ideas_uri_struct {\\r\\n    string goal_id;\\r\\n    string ideas_uri;\\r\\n    uint256 donation;\\r\\n  }\\r\\n\\r\\n  struct donation_struct {\\r\\n    string ideas_id;\\r\\n    uint256 userid;\\r\\n    uint256 donation;\\r\\n  }\\r\\n\\r\\n  struct smart_contract_uri_struct {\\r\\n    uint256 smart_contract_id;\\r\\n    uint256 ideas_id;\\r\\n    string smart_contract_uri;\\r\\n  }\\r\\n  struct goal_ideas_votes_struct {\\r\\n    string goal_id;\\r\\n    string ideas_id;\\r\\n    uint256 user_id;\\r\\n  }\\r\\n  struct message_struct {\\r\\n    uint256 message_id;\\r\\n    string ideas_id;\\r\\n    string message;\\r\\n    string sender;\\r\\n  }\\r\\n  struct message_read_struct {\\r\\n    uint256 message_id;\\r\\n    uint256 ideas_id;\\r\\n    uint256 user_id;\\r\\n    string msg_type;\\r\\n  }\\r\\n  struct reply_struct {\\r\\n    uint256 reply_id;\\r\\n    uint256 message_id;\\r\\n    uint256 ideas_id;\\r\\n    string message;\\r\\n  }\\r\\n\\r\\n  struct UnbondingRequest {\\r\\n    int64 completionTime;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct join_struct {\\r\\n    string daoId;\\r\\n    uint256 user_id;\\r\\n    string joined_date;\\r\\n  }\\r\\n\\r\\n  struct user_badge_struct {\\r\\n    uint256 user_id;\\r\\n    bool dao;\\r\\n    bool joined;\\r\\n    bool goal;\\r\\n    bool ideas;\\r\\n    bool vote;\\r\\n    bool donation;\\r\\n    bool comment;\\r\\n    bool reply;\\r\\n  }\\r\\n\\r\\n  struct feed_struct {\\r\\n    uint256 feed_id;\\r\\n    uint256 date;\\r\\n    string Type;\\r\\n    string data;\\r\\n  }\\r\\n  uint256 public _dao_ids;\\r\\n  uint256 public _donations_ids;\\r\\n  uint256 public _goal_ids;\\r\\n  uint256 public _ideas_ids;\\r\\n  uint256 public _join_ids;\\r\\n  uint256 public _smart_contract_ids;\\r\\n  uint256 public _ideas_vote_ids;\\r\\n  uint256 public _message_ids;\\r\\n  uint256 public _message_read_ids;\\r\\n  uint256 public _reply_ids;\\r\\n  uint256 public _feed_ids;\\r\\n  mapping(uint256 => dao_uri_struct) public _dao_uris; //_dao_ids              => (Dao)                    Dao Wallet + Dao URI   + Finished\\r\\n  mapping(uint256 => string) public _template_uris; //_dao_ids              => (Dao)                   Template HTML Code\\r\\n  mapping(uint256 => join_struct) public _joined_person; //_join_ids             => (Dao)                  join_struct\\r\\n\\r\\n  mapping(uint256 => goal_uri_struct) public _goal_uris; //_goal_ids             => (Goal)                   Dao ID + Goal URI\\r\\n  mapping(uint256 => ideas_uri_struct) public _ideas_uris; //_ideas_ids            => (Ideas)                  Goal ID + Ideas URI\\r\\n  mapping(uint256 => uint256) public _donated; //uint256            => (Donated to ideas)                amount\\r\\n  mapping(uint256 => feed_struct) public _feeds; //_feed_ids            => (feed_struct)\\r\\n  mapping(uint256 => donation_struct) public _donations; //uint256            => donation_struct\\r\\n  mapping(uint256 => smart_contract_uri_struct) public _smart_contracts_uris; //_smart_contract_ids   => (Ideas Smart contract)   Goal ID + Ideas URI\\r\\n  mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes; //_ideas_vote_ids       => (Vote)                   Goal ID + Ideas ID + User Id\\r\\n\\r\\n  mapping(uint256 => message_struct) public all_messages; // all_messages        => _message_ids + message_struct\\r\\n\\r\\n  mapping(uint256 => message_read_struct) public all_read_messages; // all_read_messages        => _message_read_ids + message_read_struct\\r\\n\\r\\n  mapping(uint256 => reply_struct) public all_replies; // all_messages        => _reply_ids + reply_struct\\r\\n  mapping(uint256 => user_badge_struct) public _user_badges; //user_id            => user_badge_struct\\r\\n\\r\\n  //Daos\\r\\n  function create_dao(string memory _dao_wallet, string memory _dao_uri, string memory _template, uint256 user_id) public returns (uint256) {\\r\\n    //Create Dao into _dao_uris\\r\\n    _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, 'False');\\r\\n    _template_uris[_dao_ids] = _template;\\r\\n    _user_badges[user_id].dao = true;\\r\\n    _dao_ids++;\\r\\n\\r\\n    return _dao_ids;\\r\\n  }\\r\\n\\r\\n  function update_template(uint256 _dao_id, string memory _template) public {\\r\\n    _template_uris[_dao_id] = _template;\\r\\n  }\\r\\n\\r\\n  function set_dao(uint256 _dao_id, string memory _dao_wallet, string memory _dao_uri) public {\\r\\n    //Set Dao of wallet and uri\\r\\n    _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n    _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n  }\\r\\n\\r\\n  function get_all_daos() public view returns (string[] memory) {\\r\\n    //Getting all doas\\r\\n    string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n    for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n      _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n    //Getting one dao URI\\r\\n    return _dao_uris[_dao_id].dao_uri;\\r\\n  }\\r\\n\\r\\n  function add_Feed(string memory feed_text, string memory _type) public {\\r\\n    _feeds[_feed_ids] = feed_struct(_feed_ids, block.timestamp, _type, feed_text);\\r\\n    _feed_ids++;\\r\\n  }\\r\\n\\r\\n  //Goals\\r\\n  function create_goal(string memory _goal_uri, string memory _dao_id, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create goal into _goal_uris\\r\\n    _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n\\r\\n    _user_badges[_user_id].goal = true;\\r\\n    _goal_ids++;\\r\\n    add_Feed(_feed, 'goal');\\r\\n\\r\\n    return _goal_ids;\\r\\n  }\\r\\n\\r\\n  function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n    //Set goal uri\\r\\n    _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n  }\\r\\n\\r\\n  function get_all_goals() public view returns (string[] memory) {\\r\\n    //Getting all goals\\r\\n    string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_all_goals_by_dao_id(string memory _dao_id) public view returns (string[] memory) {\\r\\n    //Getting all goals by dao id\\r\\n    string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n    uint256 _store_id;\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      if (keccak256(bytes(_goal_uris[i].dao_id)) == keccak256(bytes(_dao_id))) {\\r\\n        _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n        _store_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n    //Getting goal id by uri\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n      if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return i;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n  \\r\\n  // function get_dao_id_by_ideas_id(uint256 ideas_id) public view returns (string memory) {\\r\\n    \\r\\n  //   string memory  goal_id= _ideas_uris[ideas_id].goal_id;\\r\\n  //   string memory dao_id = _goal_uris[goal_id].dao_id;\\r\\n    \\r\\n  //   return dao_id;\\r\\n  // }\\r\\n\\r\\n  function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n    //Getting one goal URI\\r\\n    return _goal_uris[_goal_id].goal_uri;\\r\\n  }\\r\\n\\r\\n  //Ideas\\r\\n  function create_ideas(string memory _ideas_uri, string memory _goal_id, string[] memory _smart_contracts, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create ideas into _ideas_uris\\r\\n    _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri, 0);\\r\\n    _user_badges[_user_id].ideas = true;\\r\\n    _ideas_ids++;\\r\\n\\r\\n    for (uint256 i = 0; i < _smart_contracts.length; i++) {\\r\\n      create_ideas_smart_contract(_ideas_ids, _smart_contract_ids, _smart_contracts[i]);\\r\\n      _smart_contract_ids++;\\r\\n    }\\r\\n    add_Feed(_feed, 'idea');\\r\\n\\r\\n    return _ideas_ids;\\r\\n  }\\r\\n\\r\\n  function create_ideas_smart_contract(uint256 _ideas_id, uint256 _smart_contract_id, string memory _smart_contract) private {\\r\\n    _smart_contracts_uris[_smart_contract_id] = smart_contract_uri_struct(_ideas_id, _smart_contract_id, _smart_contract);\\r\\n  }\\r\\n\\r\\n  function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n    _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n  }\\r\\n\\r\\n  function add_donation(string memory _ideas_id, uint256 _doantion, uint256 _userid, string memory _feed1, string memory _feed2) public {\\r\\n    if (_user_badges[_userid].donation == false) {\\r\\n      add_Feed(_feed1, 'badge');\\r\\n    }\\r\\n    add_Feed(_feed2, 'donation');\\r\\n\\r\\n    _user_badges[_userid].donation = true;\\r\\n    _donated[_userid] += _doantion;\\r\\n    _donations[_donations_ids] = donation_struct(_ideas_id, _userid, _doantion);\\r\\n    _donations_ids++;\\r\\n  }\\r\\n\\r\\n  function join_community(string memory dao_id, uint256 person,string memory joined_date, string memory _feed) public {\\r\\n    _user_badges[person].joined = true;\\r\\n    _joined_person[_join_ids] = join_struct({daoId: dao_id, user_id: person,joined_date:joined_date});\\r\\n    _join_ids++;\\r\\n    add_Feed(_feed, 'join');\\r\\n  }\\r\\n\\r\\n  function leave_community(uint256 join_id) public {\\r\\n    _joined_person[join_id] = join_struct({daoId: \\\"9999\\\", user_id: 9999,joined_date:\\\"\\\"});\\r\\n  }\\r\\n\\r\\n  function is_person_joined(string memory dao_id, uint256 person) public view returns (bool) {\\r\\n    for (uint256 i = 0; i < _join_ids; i++) {\\r\\n      if ((_joined_person[i].user_id == person) && (keccak256(bytes(_joined_person[i].daoId)) == keccak256(bytes(dao_id)))) return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  function get_person_joinedID(string memory dao_id, uint256 person) public view returns (uint256) {\\r\\n    for (uint256 i = 0; i < _join_ids; i++) {\\r\\n      if ((_joined_person[i].user_id == person) && (keccak256(bytes(_joined_person[i].daoId)) == keccak256(bytes(dao_id)))) return i;\\r\\n    }\\r\\n\\r\\n    return 9999;\\r\\n  }\\r\\n\\r\\n  function get_all_ideas() public view returns (string[] memory) {\\r\\n    //Getting all ideas\\r\\n    string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_all_ideas_by_goal_id(string memory  _goal_id) public view returns (string[] memory) {\\r\\n    //Getting all ideas by goal id\\r\\n    string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n    uint256 _store_id;\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].goal_id)) == keccak256(bytes(_goal_id))) _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n      _store_id++;\\r\\n    }\\r\\n\\r\\n    return _StoreInfo;\\r\\n  }\\r\\n\\r\\n  function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n    //Getting ideas id by uri\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return i;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (string memory) {\\r\\n    //Getting ideas id by uri\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n      if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return _ideas_uris[i].goal_id;\\r\\n    }\\r\\n\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n    //Getting one ideas URI\\r\\n    return _ideas_uris[_ideas_id].ideas_uri;\\r\\n  }\\r\\n\\r\\n  //Votes\\r\\n  function create_goal_ideas_vote(string memory _goal_id, string memory _ideas_id, uint256 _user_id, string memory _feed,bool  feed_add) public returns (uint256) {\\r\\n    _user_badges[_user_id].vote = true;\\r\\n    //Create votes into all_goal_ideas_votes\\r\\n    all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id, _user_id);\\r\\n    _ideas_vote_ids++;\\r\\n    if (feed_add){\\r\\n        add_Feed(_feed, 'vote');\\r\\n    }\\r\\n\\r\\n    return _ideas_vote_ids;\\r\\n  }\\r\\n  \\r\\n    //Messages\\r\\n  function sendMsg(string memory _ideas_id, string memory _message, string memory _sender, uint256 _user_id) public returns (uint256) {\\r\\n    _user_badges[_user_id].comment = true;\\r\\n    //Create messsage into all_messages\\r\\n    all_messages[_message_ids] = message_struct(_message_ids, _ideas_id, _message, _sender);\\r\\n    _message_ids++;\\r\\n\\r\\n    return _message_ids;\\r\\n  }\\r\\n\\r\\n  function getMsgIDs(string memory ideas_id) public view returns (uint256[] memory) {\\r\\n    //Getting all messages ids by idea id\\r\\n    uint256[] memory _All_Ideas_Messages = new uint256[](_message_ids);\\r\\n    uint256 _msg_id;\\r\\n    for (uint256 i = 0; i < _message_ids; i++) {\\r\\n      if (keccak256(bytes(all_messages[i].ideas_id)) == keccak256(bytes(ideas_id))) {\\r\\n        _All_Ideas_Messages[_msg_id] = all_messages[i].message_id;\\r\\n        _msg_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _All_Ideas_Messages;\\r\\n  }\\r\\n\\r\\n  function sendReply(uint256 _message_id, string memory _reply, uint256 ideas_id, uint256 _userid) public returns (uint256) {\\r\\n    _user_badges[_userid].reply = true;\\r\\n    //Create reply into all_replies\\r\\n    all_replies[_reply_ids] = reply_struct(_reply_ids, _message_id, ideas_id, _reply);\\r\\n    _reply_ids++;\\r\\n\\r\\n    return _reply_ids;\\r\\n  }\\r\\n\\r\\n  function getReplyIDs(uint256 message_id) public view returns (uint256[] memory) {\\r\\n    //Getting all messages ids by idea id\\r\\n    uint256[] memory _All_Messages_Replys = new uint256[](_reply_ids);\\r\\n    uint256 _reply_id;\\r\\n    for (uint256 i = 0; i < _reply_ids; i++) {\\r\\n      if (all_replies[i].message_id == message_id) {\\r\\n        _All_Messages_Replys[_reply_id] = all_replies[i].reply_id;\\r\\n        _reply_id++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return _All_Messages_Replys;\\r\\n  }\\r\\n\\r\\n  function sendReadMsg(uint256 _message_id, uint256 _ideas_id, uint256 _wallet, string memory msg_type) public returns (uint256) {\\r\\n    //Create messsage into all_messages\\r\\n    all_read_messages[_message_read_ids] = message_read_struct(_message_id, _ideas_id, _wallet, msg_type);\\r\\n    _message_read_ids++;\\r\\n\\r\\n    return _message_read_ids;\\r\\n  }\\r\\n\\r\\n  function getReadMsg(uint256 _message_id, string memory msg_type) public view returns (bool) {\\r\\n    bool read = false;\\r\\n    for (uint256 i = 0; i < _message_read_ids; i++) {\\r\\n      if (all_read_messages[i].message_id == _message_id && keccak256(bytes(msg_type)) == keccak256(bytes(all_read_messages[i].msg_type))) {\\r\\n        read = true;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return read;\\r\\n  }\\r\\n\\r\\n  function reset_all() public {\\r\\n    for (uint256 i = 0; i < _dao_ids; i++) delete _dao_uris[i];\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) delete _goal_uris[i];\\r\\n    for (uint256 i = 0; i < _ideas_ids; i++) delete _ideas_uris[i];\\r\\n    for (uint256 i = 0; i < _goal_ids; i++) delete _smart_contracts_uris[i];\\r\\n    for (uint256 i = 0; i < _message_ids; i++) delete all_messages[i];\\r\\n    for (uint256 i = 0; i < _reply_ids; i++) delete all_replies[i];\\r\\n    for (uint256 i = 0; i < _ideas_vote_ids; i++) delete all_goal_ideas_votes[i];\\r\\n    _dao_ids = 0;\\r\\n    _goal_ids = 0;\\r\\n    _ideas_ids = 0;\\r\\n    _message_ids = 0;\\r\\n    _reply_ids = 0;\\r\\n    _ideas_vote_ids = 0;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa4d4612a8e7dd38f1c91ee13b19cdd330b00c41fe4730521f038ea6c4fa756ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d2f806100206000396000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c806389e93784116101de578063b527d45e1161010f578063cace8d46116100ad578063dddb6f861161007c578063dddb6f8614610be7578063e32acc1a14610c17578063ec24580214610c47578063ff4a37ef14610c6557610383565b8063cace8d4614610b36578063cd23080914610b69578063d3791b2014610b99578063d9fc52db14610bb757610383565b8063c04fe978116100e9578063c04fe97814610aae578063c29595c514610acc578063ca013f1714610ae8578063ca98210414610b0657610383565b8063b527d45e14610a43578063bda0033514610a76578063c04e743014610a9257610383565b8063a36adb9f1161017c578063aa2bf5d311610156578063aa2bf5d3146109bb578063aa4cdf2a146109d9578063b16060a614610a09578063b39a38bd14610a1357610383565b8063a36adb9f14610923578063a428a47f14610953578063a807c20e1461098b57610383565b80639077007d116101b85780639077007d14610887578063934c5f00146108a557806397ee7606146108d5578063a1ca9178146108f357610383565b806389e93784146108095780638ac4110c146108395780638d3d25951461085757610383565b80634a797bd7116102b85780637fc543ec11610256578063829a5d9811610230578063829a5d981461077157806386ffa45b146107a157806387633eb2146107d1578063881de858146107ed57610383565b80637fc543ec146106f3578063812fae1f14610725578063826eeefe1461075557610383565b80636ecda4ee116102925780636ecda4ee146106585780637bbd582d146106885780637bc9724b146106a65780637f2035d4146106c257610383565b80634a797bd7146105d757806354a9fb18146105f55780635d907da11461062857610383565b806320959ed011610325578063330b8f26116102ff578063330b8f26146105105780633f87a2f41461054257806342f78f4714610575578063468d0c80146105a557610383565b806320959ed01461049057806327a568b9146104c057806329b56f60146104f257610383565b80631b592aeb116103615780631b592aeb146103f45780631ba44c4c146104125780631e9ac9f5146104445780631fd4d6641461047457610383565b80630377d44a146103885780631171b621146103b857806313bf4cea146103d6575b600080fd5b6103a2600480360381019061039d9190613930565b610c97565b6040516103af9190613aba565b60405180910390f35b6103c0610e21565b6040516103cd9190613af5565b60405180910390f35b6103de610e27565b6040516103eb9190613af5565b60405180910390f35b6103fc610e2d565b6040516104099190613af5565b60405180910390f35b61042c60048036038101906104279190613b3c565b610e33565b60405161043b93929190613bb3565b60405180910390f35b61045e60048036038101906104599190613930565b610f6d565b60405161046b9190613af5565b60405180910390f35b61048e60048036038101906104899190613bf8565b610fde565b005b6104aa60048036038101906104a59190613b3c565b611161565b6040516104b79190613af5565b60405180910390f35b6104da60048036038101906104d59190613b3c565b611179565b6040516104e993929190613cc7565b60405180910390f35b6104fa61133b565b6040516105079190613aba565b60405180910390f35b61052a60048036038101906105259190613b3c565b611476565b60405161053993929190613d13565b60405180910390f35b61055c60048036038101906105579190613b3c565b6115b0565b60405161056c9493929190613d58565b60405180910390f35b61058f600480360381019061058a9190613930565b611668565b60405161059c9190613e62565b60405180910390f35b6105bf60048036038101906105ba9190613b3c565b611766565b6040516105ce93929190613bb3565b60405180910390f35b6105df6118a0565b6040516105ec9190613af5565b60405180910390f35b61060f600480360381019061060a9190613b3c565b6118a6565b60405161061f9493929190613e84565b60405180910390f35b610642600480360381019061063d9190613b3c565b6119e6565b60405161064f9190613ed7565b60405180910390f35b610672600480360381019061066d9190613b3c565b611a8e565b60405161067f9190613ed7565b60405180910390f35b610690611b2e565b60405161069d9190613af5565b60405180910390f35b6106c060048036038101906106bb9190613ef9565b611b34565b005b6106dc60048036038101906106d79190613b3c565b611c29565b6040516106ea929190613fb4565b60405180910390f35b61070d60048036038101906107089190613b3c565b611d5d565b60405161071c93929190613feb565b60405180910390f35b61073f600480360381019061073a9190613b3c565b611e0f565b60405161074c9190613e62565b60405180910390f35b61076f600480360381019061076a9190613b3c565b611ef2565b005b61078b60048036038101906107869190613930565b611fa2565b6040516107989190613aba565b60405180910390f35b6107bb60048036038101906107b69190614029565b61212c565b6040516107c89190613af5565b60405180910390f35b6107eb60048036038101906107e691906140e4565b61224c565b005b61080760048036038101906108029190614140565b612271565b005b610823600480360381019061081e9190614203565b6122be565b6040516108309190613af5565b60405180910390f35b6108416123c4565b60405161084e9190613af5565b60405180910390f35b610871600480360381019061086c9190613b3c565b6123ca565b60405161087e9190613ed7565b60405180910390f35b61088f612472565b60405161089c9190613af5565b60405180910390f35b6108bf60048036038101906108ba91906142d2565b612478565b6040516108cc9190613af5565b60405180910390f35b6108dd61250c565b6040516108ea9190613aba565b60405180910390f35b61090d60048036038101906109089190613930565b612647565b60405161091a9190613af5565b60405180910390f35b61093d60048036038101906109389190614355565b6126b8565b60405161094a9190613af5565b60405180910390f35b61096d60048036038101906109689190613b3c565b61274d565b604051610982999897969594939291906143c0565b60405180910390f35b6109a560048036038101906109a09190614355565b612803565b6040516109b2919061444d565b60405180910390f35b6109c3612898565b6040516109d09190613af5565b60405180910390f35b6109f360048036038101906109ee9190613930565b61289e565b604051610a009190613ed7565b60405180910390f35b610a116129b8565b005b610a2d6004803603810190610a289190614468565b612c8a565b604051610a3a9190613af5565b60405180910390f35b610a5d6004803603810190610a589190613b3c565b612d78565b604051610a6d9493929190614523565b60405180910390f35b610a906004803603810190610a8b919061457d565b612f40565b005b610aac6004803603810190610aa791906140e4565b612fd7565b005b610ab6612fff565b604051610ac39190613aba565b60405180910390f35b610ae66004803603810190610ae191906140e4565b613139565b005b610af0613161565b604051610afd9190613af5565b60405180910390f35b610b206004803603810190610b1b9190614029565b613167565b604051610b2d9190613af5565b60405180910390f35b610b506004803603810190610b4b9190613b3c565b613244565b604051610b609493929190613d58565b60405180910390f35b610b836004803603810190610b7e91906140e4565b6132fc565b604051610b90919061444d565b60405180910390f35b610ba161338d565b604051610bae9190613af5565b60405180910390f35b610bd16004803603810190610bcc91906145f5565b613393565b604051610bde9190613af5565b60405180910390f35b610c016004803603810190610bfc919061475e565b613458565b604051610c0e9190613af5565b60405180910390f35b610c316004803603810190610c2c9190613b3c565b6135b9565b604051610c3e9190613ed7565b60405180910390f35b610c4f613661565b604051610c5c9190613af5565b60405180910390f35b610c7f6004803603810190610c7a9190613b3c565b613667565b604051610c8e93929190614849565b60405180910390f35b6060600060025467ffffffffffffffff811115610cb757610cb6613805565b5b604051908082528060200260200182016040528015610cea57816020015b6060815260200190600190039081610cd55790505b509050600080600090505b600254811015610e16578480519060200120600e6000838152602001908152602001600020600001604051610d2a919061498a565b604051809103902003610e0357600e60008281526020019081526020016000206001018054610d58906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d84906148b6565b8015610dd15780601f10610da657610100808354040283529160200191610dd1565b820191906000526020600020905b815481529060010190602001808311610db457829003601f168201915b5050505050838381518110610de957610de86149a1565b5b60200260200101819052508180610dff906149ff565b9250505b8080610e0e906149ff565b915050610cf5565b508192505050919050565b60045481565b60025481565b60055481565b6014602052806000526040600020600091509050806000018054610e56906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e82906148b6565b8015610ecf5780601f10610ea457610100808354040283529160200191610ecf565b820191906000526020600020905b815481529060010190602001808311610eb257829003601f168201915b505050505090806001018054610ee4906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f10906148b6565b8015610f5d5780601f10610f3257610100808354040283529160200191610f5d565b820191906000526020600020905b815481529060010190602001808311610f4057829003601f168201915b5050505050908060020154905083565b600080600090505b600254811015610fd3578280519060200120600e6000838152602001908152602001600020600101604051610faa919061498a565b604051809103902003610fc05780915050610fd9565b8080610fcb906149ff565b915050610f75565b50600090505b919050565b600015156018600085815260200190815260200160002060010160059054906101000a900460ff1615150361104d5761104c826040518060400160405280600581526020017f6261646765000000000000000000000000000000000000000000000000000000815250612f40565b5b61108c816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250612f40565b60016018600085815260200190815260200160002060010160056101000a81548160ff021916908315150217905550836010600085815260200190815260200160002060008282546110de9190614a47565b92505081905550604051806060016040528086815260200184815260200185815250601260006001548152602001908152602001600020600082015181600001908161112a9190614c27565b50602082015181600101556040820151816002015590505060016000815480929190611155906149ff565b91905055505050505050565b60106020528060005260406000206000915090505481565b600b60205280600052604060002060009150905080600001805461119c906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546111c8906148b6565b80156112155780601f106111ea57610100808354040283529160200191611215565b820191906000526020600020905b8154815290600101906020018083116111f857829003601f168201915b50505050509080600101805461122a906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611256906148b6565b80156112a35780601f10611278576101008083540402835291602001916112a3565b820191906000526020600020905b81548152906001019060200180831161128657829003601f168201915b5050505050908060020180546112b8906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546112e4906148b6565b80156113315780601f1061130657610100808354040283529160200191611331565b820191906000526020600020905b81548152906001019060200180831161131457829003601f168201915b5050505050905083565b6060600060025467ffffffffffffffff81111561135b5761135a613805565b5b60405190808252806020026020018201604052801561138e57816020015b60608152602001906001900390816113795790505b50905060005b60025481101561146e57600e600082815260200190815260200160002060010180546113bf906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546113eb906148b6565b80156114385780601f1061140d57610100808354040283529160200191611438565b820191906000526020600020905b81548152906001019060200180831161141b57829003601f168201915b50505050508282815181106114505761144f6149a1565b5b60200260200101819052508080611466906149ff565b915050611394565b508091505090565b600d602052806000526040600020600091509050806000018054611499906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546114c5906148b6565b80156115125780601f106114e757610100808354040283529160200191611512565b820191906000526020600020905b8154815290600101906020018083116114f557829003601f168201915b50505050509080600101549080600201805461152d906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611559906148b6565b80156115a65780601f1061157b576101008083540402835291602001916115a6565b820191906000526020600020905b81548152906001019060200180831161158957829003601f168201915b5050505050905083565b60176020528060005260406000206000915090508060000154908060010154908060020154908060030180546115e5906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611611906148b6565b801561165e5780601f106116335761010080835404028352916020019161165e565b820191906000526020600020905b81548152906001019060200180831161164157829003601f168201915b5050505050905084565b6060600060075467ffffffffffffffff81111561168857611687613805565b5b6040519080825280602002602001820160405280156116b65781602001602082028036833780820191505090505b509050600080600090505b60075481101561175b578480519060200120601560008381526020019081526020016000206001016040516116f6919061498a565b60405180910390200361174857601560008281526020019081526020016000206000015483838151811061172d5761172c6149a1565b5b6020026020010181815250508180611744906149ff565b9250505b8080611753906149ff565b9150506116c1565b508192505050919050565b600f602052806000526040600020600091509050806000018054611789906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546117b5906148b6565b80156118025780601f106117d757610100808354040283529160200191611802565b820191906000526020600020905b8154815290600101906020018083116117e557829003601f168201915b505050505090806001018054611817906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611843906148b6565b80156118905780601f1061186557610100808354040283529160200191611890565b820191906000526020600020905b81548152906001019060200180831161187357829003601f168201915b5050505050908060020154905083565b60065481565b60116020528060005260406000206000915090508060000154908060010154908060020180546118d5906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611901906148b6565b801561194e5780601f106119235761010080835404028352916020019161194e565b820191906000526020600020905b81548152906001019060200180831161193157829003601f168201915b505050505090806003018054611963906148b6565b80601f016020809104026020016040519081016040528092919081815260200182805461198f906148b6565b80156119dc5780601f106119b1576101008083540402835291602001916119dc565b820191906000526020600020905b8154815290600101906020018083116119bf57829003601f168201915b5050505050905084565b6060600b60008381526020019081526020016000206001018054611a09906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611a35906148b6565b8015611a825780601f10611a5757610100808354040283529160200191611a82565b820191906000526020600020905b815481529060010190602001808311611a6557829003601f168201915b50505050509050919050565b600c6020528060005260406000206000915090508054611aad906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad9906148b6565b8015611b265780601f10611afb57610100808354040283529160200191611b26565b820191906000526020600020905b815481529060010190602001808311611b0957829003601f168201915b505050505081565b60005481565b60016018600085815260200190815260200160002060010160016101000a81548160ff021916908315150217905550604051806060016040528085815260200184815260200183815250600d600060045481526020019081526020016000206000820151816000019081611ba89190614c27565b50602082015181600101556040820151816002019081611bc89190614c27565b5090505060046000815480929190611bdf906149ff565b9190505550611c23816040518060400160405280600481526020017f6a6f696e00000000000000000000000000000000000000000000000000000000815250612f40565b50505050565b600e602052806000526040600020600091509050806000018054611c4c906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611c78906148b6565b8015611cc55780601f10611c9a57610100808354040283529160200191611cc5565b820191906000526020600020905b815481529060010190602001808311611ca857829003601f168201915b505050505090806001018054611cda906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d06906148b6565b8015611d535780601f10611d2857610100808354040283529160200191611d53565b820191906000526020600020905b815481529060010190602001808311611d3657829003601f168201915b5050505050905082565b6012602052806000526040600020600091509050806000018054611d80906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611dac906148b6565b8015611df95780601f10611dce57610100808354040283529160200191611df9565b820191906000526020600020905b815481529060010190602001808311611ddc57829003601f168201915b5050505050908060010154908060020154905083565b6060600060095467ffffffffffffffff811115611e2f57611e2e613805565b5b604051908082528060200260200182016040528015611e5d5781602001602082028036833780820191505090505b509050600080600090505b600954811015611ee75784601760008381526020019081526020016000206001015403611ed4576017600082815260200190815260200160002060000154838381518110611eb957611eb86149a1565b5b6020026020010181815250508180611ed0906149ff565b9250505b8080611edf906149ff565b915050611e68565b508192505050919050565b60405180606001604052806040518060400160405280600481526020017f3939393900000000000000000000000000000000000000000000000000000000815250815260200161270f815260200160405180602001604052806000815250815250600d60008381526020019081526020016000206000820151816000019081611f7b9190614c27565b50602082015181600101556040820151816002019081611f9b9190614c27565b5090505050565b6060600060035467ffffffffffffffff811115611fc257611fc1613805565b5b604051908082528060200260200182016040528015611ff557816020015b6060815260200190600190039081611fe05790505b509050600080600090505b600354811015612121578480519060200120600f6000838152602001908152602001600020600001604051612035919061498a565b60405180910390200361210057600f60008281526020019081526020016000206001018054612063906148b6565b80601f016020809104026020016040519081016040528092919081815260200182805461208f906148b6565b80156120dc5780601f106120b1576101008083540402835291602001916120dc565b820191906000526020600020905b8154815290600101906020018083116120bf57829003601f168201915b50505050508383815181106120f4576120f36149a1565b5b60200260200101819052505b818061210b906149ff565b9250508080612119906149ff565b915050612000565b508192505050919050565b600060405180606001604052808681526020018581526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600b60008054815260200190815260200160002060008201518160000190816121a79190614c27565b5060208201518160010190816121bd9190614c27565b5060408201518160020190816121d39190614c27565b5090505082600c60008054815260200190815260200160002090816121f89190614c27565b5060016018600084815260200190815260200160002060010160006101000a81548160ff02191690831515021790555060008081548092919061223a906149ff565b91905055506000549050949350505050565b80600c6000848152602001908152602001600020908161226c9190614c27565b505050565b81600b600085815260200190815260200160002060000190816122949190614c27565b5080600b600085815260200190815260200160002060010190816122b89190614c27565b50505050565b600060016018600086815260200190815260200160002060010160046101000a81548160ff02191690831515021790555060405180606001604052808781526020018681526020018581525060146000600654815260200190815260200160002060008201518160000190816123349190614c27565b50602082015181600101908161234a9190614c27565b50604082015181600201559050506006600081548092919061236b906149ff565b919050555081156123b6576123b5836040518060400160405280600481526020017f766f746500000000000000000000000000000000000000000000000000000000815250612f40565b5b600654905095945050505050565b600a5481565b6060600f600083815260200190815260200160002060010180546123ed906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612419906148b6565b80156124665780601f1061243b57610100808354040283529160200191612466565b820191906000526020600020905b81548152906001019060200180831161244957829003601f168201915b50505050509050919050565b60075481565b600060405180608001604052808681526020018581526020018481526020018381525060166000600854815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190816124e39190614c27565b50905050600860008154809291906124fa906149ff565b91905055506008549050949350505050565b6060600060035467ffffffffffffffff81111561252c5761252b613805565b5b60405190808252806020026020018201604052801561255f57816020015b606081526020019060019003908161254a5790505b50905060005b60035481101561263f57600f60008281526020019081526020016000206001018054612590906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546125bc906148b6565b80156126095780601f106125de57610100808354040283529160200191612609565b820191906000526020600020905b8154815290600101906020018083116125ec57829003601f168201915b5050505050828281518110612621576126206149a1565b5b60200260200101819052508080612637906149ff565b915050612565565b508091505090565b600080600090505b6003548110156126ad578280519060200120600f6000838152602001908152602001600020600101604051612684919061498a565b60405180910390200361269a57809150506126b3565b80806126a5906149ff565b91505061264f565b50600090505b919050565b600080600090505b6004548110156127405782600d60008381526020019081526020016000206001015414801561271f57508380519060200120600d6000838152602001908152602001600020600001604051612715919061498a565b6040518091039020145b1561272d5780915050612747565b8080612738906149ff565b9150506126c0565b5061270f90505b92915050565b60186020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16908060010160039054906101000a900460ff16908060010160049054906101000a900460ff16908060010160059054906101000a900460ff16908060010160069054906101000a900460ff16908060010160079054906101000a900460ff16905089565b600080600090505b60045481101561288c5782600d60008381526020019081526020016000206001015414801561286a57508380519060200120600d6000838152602001908152602001600020600001604051612860919061498a565b6040518091039020145b15612879576001915050612892565b8080612884906149ff565b91505061280b565b50600090505b92915050565b60095481565b606060005b60035481101561299f578280519060200120600f60008381526020019081526020016000206001016040516128d8919061498a565b60405180910390200361298c57600f60008281526020019081526020016000206000018054612906906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612932906148b6565b801561297f5780601f106129545761010080835404028352916020019161297f565b820191906000526020600020905b81548152906001019060200180831161296257829003601f168201915b50505050509150506129b3565b8080612997906149ff565b9150506128a3565b506040518060200160405280600081525090505b919050565b60005b600054811015612a1e57600b6000828152602001908152602001600020600080820160006129e99190613779565b6001820160006129f99190613779565b600282016000612a099190613779565b50508080612a16906149ff565b9150506129bb565b5060005b600254811015612a7557600e600082815260200190815260200160002060008082016000612a509190613779565b600182016000612a609190613779565b50508080612a6d906149ff565b915050612a22565b5060005b600354811015612ad457600f600082815260200190815260200160002060008082016000612aa79190613779565b600182016000612ab79190613779565b600282016000905550508080612acc906149ff565b915050612a79565b5060005b600254811015612b2b57601360008281526020019081526020016000206000808201600090556001820160009055600282016000612b169190613779565b50508080612b23906149ff565b915050612ad8565b5060005b600754811015612b9a5760156000828152602001908152602001600020600080820160009055600182016000612b659190613779565b600282016000612b759190613779565b600382016000612b859190613779565b50508080612b92906149ff565b915050612b2f565b5060005b600954811015612bf9576017600082815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000612be49190613779565b50508080612bf1906149ff565b915050612b9e565b5060005b600654811015612c58576014600082815260200190815260200160002060008082016000612c2b9190613779565b600182016000612c3b9190613779565b600282016000905550508080612c50906149ff565b915050612bfd565b506000808190555060006002819055506000600381905550600060078190555060006009819055506000600681905550565b6000604051806040016040528085815260200186815250600e600060025481526020019081526020016000206000820151816000019081612ccb9190614c27565b506020820151816001019081612ce19190614c27565b5090505060016018600085815260200190815260200160002060010160026101000a81548160ff02191690831515021790555060026000815480929190612d27906149ff565b9190505550612d6b826040518060400160405280600481526020017f676f616c00000000000000000000000000000000000000000000000000000000815250612f40565b6002549050949350505050565b6015602052806000526040600020600091509050806000015490806001018054612da1906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612dcd906148b6565b8015612e1a5780601f10612def57610100808354040283529160200191612e1a565b820191906000526020600020905b815481529060010190602001808311612dfd57829003601f168201915b505050505090806002018054612e2f906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612e5b906148b6565b8015612ea85780601f10612e7d57610100808354040283529160200191612ea8565b820191906000526020600020905b815481529060010190602001808311612e8b57829003601f168201915b505050505090806003018054612ebd906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612ee9906148b6565b8015612f365780601f10612f0b57610100808354040283529160200191612f36565b820191906000526020600020905b815481529060010190602001808311612f1957829003601f168201915b5050505050905084565b6040518060800160405280600a5481526020014281526020018281526020018381525060116000600a54815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081612fa19190614c27565b506060820151816003019081612fb79190614c27565b50905050600a6000815480929190612fce906149ff565b91905055505050565b80600f60008481526020019081526020016000206001019081612ffa9190614c27565b505050565b60606000805467ffffffffffffffff81111561301e5761301d613805565b5b60405190808252806020026020018201604052801561305157816020015b606081526020019060019003908161303c5790505b50905060005b60005481101561313157600b60008281526020019081526020016000206001018054613082906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546130ae906148b6565b80156130fb5780601f106130d0576101008083540402835291602001916130fb565b820191906000526020600020905b8154815290600101906020018083116130de57829003601f168201915b5050505050828281518110613113576131126149a1565b5b60200260200101819052508080613129906149ff565b915050613057565b508091505090565b80600e6000848152602001908152602001600020600101908161315c9190614c27565b505050565b60085481565b600060016018600084815260200190815260200160002060010160066101000a81548160ff02191690831515021790555060405180608001604052806007548152602001868152602001858152602001848152506015600060075481526020019081526020016000206000820151816000015560208201518160010190816131ef9190614c27565b5060408201518160020190816132059190614c27565b50606082015181600301908161321b9190614c27565b5090505060076000815480929190613232906149ff565b91905055506007549050949350505050565b6016602052806000526040600020600091509050806000015490806001015490806002015490806003018054613279906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546132a5906148b6565b80156132f25780601f106132c7576101008083540402835291602001916132f2565b820191906000526020600020905b8154815290600101906020018083116132d557829003601f168201915b5050505050905084565b6000806000905060005b60085481101561338257846016600083815260200190815260200160002060000154148015613365575060166000828152602001908152602001600020600301604051613353919061498a565b60405180910390208480519060200120145b1561336f57600191505b808061337a906149ff565b915050613306565b508091505092915050565b60035481565b600060016018600084815260200190815260200160002060010160076101000a81548160ff0219169083151502179055506040518060800160405280600954815260200186815260200184815260200185815250601760006009548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161342f9190614c27565b5090505060096000815480929190613446906149ff565b91905055506009549050949350505050565b600060405180606001604052808681526020018781526020016000815250600f6000600354815260200190815260200160002060008201518160000190816134a09190614c27565b5060208201518160010190816134b69190614c27565b506040820151816002015590505060016018600085815260200190815260200160002060010160036101000a81548160ff02191690831515021790555060036000815480929190613506906149ff565b919050555060005b845181101561356b57613540600354600554878481518110613533576135326149a1565b5b6020026020010151613719565b60056000815480929190613553906149ff565b91905055508080613563906149ff565b91505061350e565b506135ab826040518060400160405280600481526020017f6964656100000000000000000000000000000000000000000000000000000000815250612f40565b600354905095945050505050565b6060600e600083815260200190815260200160002060010180546135dc906148b6565b80601f0160208091040260200160405190810160405280929190818152602001828054613608906148b6565b80156136555780601f1061362a57610100808354040283529160200191613655565b820191906000526020600020905b81548152906001019060200180831161363857829003601f168201915b50505050509050919050565b60015481565b6013602052806000526040600020600091509050806000015490806001015490806002018054613696906148b6565b80601f01602080910402602001604051908101604052809291908181526020018280546136c2906148b6565b801561370f5780601f106136e45761010080835404028352916020019161370f565b820191906000526020600020905b8154815290600101906020018083116136f257829003601f168201915b5050505050905083565b60405180606001604052808481526020018381526020018281525060136000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020190816137709190614c27565b50905050505050565b508054613785906148b6565b6000825580601f1061379757506137b6565b601f0160209004906000526020600020908101906137b591906137b9565b5b50565b5b808211156137d25760008160009055506001016137ba565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61383d826137f4565b810181811067ffffffffffffffff8211171561385c5761385b613805565b5b80604052505050565b600061386f6137d6565b905061387b8282613834565b919050565b600067ffffffffffffffff82111561389b5761389a613805565b5b6138a4826137f4565b9050602081019050919050565b82818337600083830152505050565b60006138d36138ce84613880565b613865565b9050828152602081018484840111156138ef576138ee6137ef565b5b6138fa8482856138b1565b509392505050565b600082601f830112613917576139166137ea565b5b81356139278482602086016138c0565b91505092915050565b600060208284031215613946576139456137e0565b5b600082013567ffffffffffffffff811115613964576139636137e5565b5b61397084828501613902565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139df5780820151818401526020810190506139c4565b60008484015250505050565b60006139f6826139a5565b613a0081856139b0565b9350613a108185602086016139c1565b613a19816137f4565b840191505092915050565b6000613a3083836139eb565b905092915050565b6000602082019050919050565b6000613a5082613979565b613a5a8185613984565b935083602082028501613a6c85613995565b8060005b85811015613aa85784840389528151613a898582613a24565b9450613a9483613a38565b925060208a01995050600181019050613a70565b50829750879550505050505092915050565b60006020820190508181036000830152613ad48184613a45565b905092915050565b6000819050919050565b613aef81613adc565b82525050565b6000602082019050613b0a6000830184613ae6565b92915050565b613b1981613adc565b8114613b2457600080fd5b50565b600081359050613b3681613b10565b92915050565b600060208284031215613b5257613b516137e0565b5b6000613b6084828501613b27565b91505092915050565b600082825260208201905092915050565b6000613b85826139a5565b613b8f8185613b69565b9350613b9f8185602086016139c1565b613ba8816137f4565b840191505092915050565b60006060820190508181036000830152613bcd8186613b7a565b90508181036020830152613be18185613b7a565b9050613bf06040830184613ae6565b949350505050565b600080600080600060a08688031215613c1457613c136137e0565b5b600086013567ffffffffffffffff811115613c3257613c316137e5565b5b613c3e88828901613902565b9550506020613c4f88828901613b27565b9450506040613c6088828901613b27565b935050606086013567ffffffffffffffff811115613c8157613c806137e5565b5b613c8d88828901613902565b925050608086013567ffffffffffffffff811115613cae57613cad6137e5565b5b613cba88828901613902565b9150509295509295909350565b60006060820190508181036000830152613ce18186613b7a565b90508181036020830152613cf58185613b7a565b90508181036040830152613d098184613b7a565b9050949350505050565b60006060820190508181036000830152613d2d8186613b7a565b9050613d3c6020830185613ae6565b8181036040830152613d4e8184613b7a565b9050949350505050565b6000608082019050613d6d6000830187613ae6565b613d7a6020830186613ae6565b613d876040830185613ae6565b8181036060830152613d998184613b7a565b905095945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613dd981613adc565b82525050565b6000613deb8383613dd0565b60208301905092915050565b6000602082019050919050565b6000613e0f82613da4565b613e198185613daf565b9350613e2483613dc0565b8060005b83811015613e55578151613e3c8882613ddf565b9750613e4783613df7565b925050600181019050613e28565b5085935050505092915050565b60006020820190508181036000830152613e7c8184613e04565b905092915050565b6000608082019050613e996000830187613ae6565b613ea66020830186613ae6565b8181036040830152613eb88185613b7a565b90508181036060830152613ecc8184613b7a565b905095945050505050565b60006020820190508181036000830152613ef18184613b7a565b905092915050565b60008060008060808587031215613f1357613f126137e0565b5b600085013567ffffffffffffffff811115613f3157613f306137e5565b5b613f3d87828801613902565b9450506020613f4e87828801613b27565b935050604085013567ffffffffffffffff811115613f6f57613f6e6137e5565b5b613f7b87828801613902565b925050606085013567ffffffffffffffff811115613f9c57613f9b6137e5565b5b613fa887828801613902565b91505092959194509250565b60006040820190508181036000830152613fce8185613b7a565b90508181036020830152613fe28184613b7a565b90509392505050565b600060608201905081810360008301526140058186613b7a565b90506140146020830185613ae6565b6140216040830184613ae6565b949350505050565b60008060008060808587031215614043576140426137e0565b5b600085013567ffffffffffffffff811115614061576140606137e5565b5b61406d87828801613902565b945050602085013567ffffffffffffffff81111561408e5761408d6137e5565b5b61409a87828801613902565b935050604085013567ffffffffffffffff8111156140bb576140ba6137e5565b5b6140c787828801613902565b92505060606140d887828801613b27565b91505092959194509250565b600080604083850312156140fb576140fa6137e0565b5b600061410985828601613b27565b925050602083013567ffffffffffffffff81111561412a576141296137e5565b5b61413685828601613902565b9150509250929050565b600080600060608486031215614159576141586137e0565b5b600061416786828701613b27565b935050602084013567ffffffffffffffff811115614188576141876137e5565b5b61419486828701613902565b925050604084013567ffffffffffffffff8111156141b5576141b46137e5565b5b6141c186828701613902565b9150509250925092565b60008115159050919050565b6141e0816141cb565b81146141eb57600080fd5b50565b6000813590506141fd816141d7565b92915050565b600080600080600060a0868803121561421f5761421e6137e0565b5b600086013567ffffffffffffffff81111561423d5761423c6137e5565b5b61424988828901613902565b955050602086013567ffffffffffffffff81111561426a576142696137e5565b5b61427688828901613902565b945050604061428788828901613b27565b935050606086013567ffffffffffffffff8111156142a8576142a76137e5565b5b6142b488828901613902565b92505060806142c5888289016141ee565b9150509295509295909350565b600080600080608085870312156142ec576142eb6137e0565b5b60006142fa87828801613b27565b945050602061430b87828801613b27565b935050604061431c87828801613b27565b925050606085013567ffffffffffffffff81111561433d5761433c6137e5565b5b61434987828801613902565b91505092959194509250565b6000806040838503121561436c5761436b6137e0565b5b600083013567ffffffffffffffff81111561438a576143896137e5565b5b61439685828601613902565b92505060206143a785828601613b27565b9150509250929050565b6143ba816141cb565b82525050565b6000610120820190506143d6600083018c613ae6565b6143e3602083018b6143b1565b6143f0604083018a6143b1565b6143fd60608301896143b1565b61440a60808301886143b1565b61441760a08301876143b1565b61442460c08301866143b1565b61443160e08301856143b1565b61443f6101008301846143b1565b9a9950505050505050505050565b600060208201905061446260008301846143b1565b92915050565b60008060008060808587031215614482576144816137e0565b5b600085013567ffffffffffffffff8111156144a05761449f6137e5565b5b6144ac87828801613902565b945050602085013567ffffffffffffffff8111156144cd576144cc6137e5565b5b6144d987828801613902565b93505060406144ea87828801613b27565b925050606085013567ffffffffffffffff81111561450b5761450a6137e5565b5b61451787828801613902565b91505092959194509250565b60006080820190506145386000830187613ae6565b818103602083015261454a8186613b7a565b9050818103604083015261455e8185613b7a565b905081810360608301526145728184613b7a565b905095945050505050565b60008060408385031215614594576145936137e0565b5b600083013567ffffffffffffffff8111156145b2576145b16137e5565b5b6145be85828601613902565b925050602083013567ffffffffffffffff8111156145df576145de6137e5565b5b6145eb85828601613902565b9150509250929050565b6000806000806080858703121561460f5761460e6137e0565b5b600061461d87828801613b27565b945050602085013567ffffffffffffffff81111561463e5761463d6137e5565b5b61464a87828801613902565b935050604061465b87828801613b27565b925050606061466c87828801613b27565b91505092959194509250565b600067ffffffffffffffff82111561469357614692613805565b5b602082029050602081019050919050565b600080fd5b60006146bc6146b784614678565b613865565b905080838252602082019050602084028301858111156146df576146de6146a4565b5b835b8181101561472657803567ffffffffffffffff811115614704576147036137ea565b5b8086016147118982613902565b855260208501945050506020810190506146e1565b5050509392505050565b600082601f830112614745576147446137ea565b5b81356147558482602086016146a9565b91505092915050565b600080600080600060a0868803121561477a576147796137e0565b5b600086013567ffffffffffffffff811115614798576147976137e5565b5b6147a488828901613902565b955050602086013567ffffffffffffffff8111156147c5576147c46137e5565b5b6147d188828901613902565b945050604086013567ffffffffffffffff8111156147f2576147f16137e5565b5b6147fe88828901614730565b935050606061480f88828901613b27565b925050608086013567ffffffffffffffff8111156148305761482f6137e5565b5b61483c88828901613902565b9150509295509295909350565b600060608201905061485e6000830186613ae6565b61486b6020830185613ae6565b818103604083015261487d8184613b7a565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806148ce57607f821691505b6020821081036148e1576148e0614887565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614914816148b6565b61491e81866148e7565b94506001821660008114614939576001811461494e57614981565b60ff1983168652811515820286019350614981565b614957856148f2565b60005b838110156149795781548189015260018201915060208101905061495a565b838801955050505b50505092915050565b60006149968284614907565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a0a82613adc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a3c57614a3b6149d0565b5b600182019050919050565b6000614a5282613adc565b9150614a5d83613adc565b9250828201905080821115614a7557614a746149d0565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614add7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614aa0565b614ae78683614aa0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b24614b1f614b1a84613adc565b614aff565b613adc565b9050919050565b6000819050919050565b614b3e83614b09565b614b52614b4a82614b2b565b848454614aad565b825550505050565b600090565b614b67614b5a565b614b72818484614b35565b505050565b5b81811015614b9657614b8b600082614b5f565b600181019050614b78565b5050565b601f821115614bdb57614bac81614a7b565b614bb584614a90565b81016020851015614bc4578190505b614bd8614bd085614a90565b830182614b77565b50505b505050565b600082821c905092915050565b6000614bfe60001984600802614be0565b1980831691505092915050565b6000614c178383614bed565b9150826002028217905092915050565b614c30826139a5565b67ffffffffffffffff811115614c4957614c48613805565b5b614c5382546148b6565b614c5e828285614b9a565b600060209050601f831160018114614c915760008415614c7f578287015190505b614c898582614c0b565b865550614cf1565b601f198416614c9f86614a7b565b60005b82811015614cc757848901518255600182019150602085019450602081019050614ca2565b86831015614ce45784890151614ce0601f891682614bed565b8355505b6001600288020188555050505b50505050505056fea264697066735822122050d350632a49b4eb9dee8fe1acdaebb57cbac822eba5a8d3d1c1caed8a6bf9da64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1864,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1866,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_donations_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1868,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1870,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1872,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_join_ids",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1874,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_smart_contract_ids",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1876,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1878,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_message_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1880,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_message_read_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1882,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_reply_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1884,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_feed_ids",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1889,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)1762_storage)"
      },
      {
        "astId": 1893,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_template_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1898,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_joined_person",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(join_struct)1834_storage)"
      },
      {
        "astId": 1903,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)1767_storage)"
      },
      {
        "astId": 1908,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)1774_storage)"
      },
      {
        "astId": 1912,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_donated",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1917,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_feeds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(feed_struct)1862_storage)"
      },
      {
        "astId": 1922,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_donations",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(donation_struct)1781_storage)"
      },
      {
        "astId": 1927,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_smart_contracts_uris",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1788_storage)"
      },
      {
        "astId": 1932,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1795_storage)"
      },
      {
        "astId": 1937,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "all_messages",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_struct(message_struct)1804_storage)"
      },
      {
        "astId": 1942,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "all_read_messages",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_struct(message_read_struct)1813_storage)"
      },
      {
        "astId": 1947,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "all_replies",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(reply_struct)1822_storage)"
      },
      {
        "astId": 1952,
        "contract": "contracts/DAOnation.sol:DAOnation",
        "label": "_user_badges",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(user_badge_struct)1853_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)1762_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)1762_storage"
      },
      "t_mapping(t_uint256,t_struct(donation_struct)1781_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.donation_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(donation_struct)1781_storage"
      },
      "t_mapping(t_uint256,t_struct(feed_struct)1862_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.feed_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(feed_struct)1862_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1795_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)1795_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)1767_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)1767_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)1774_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)1774_storage"
      },
      "t_mapping(t_uint256,t_struct(join_struct)1834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.join_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(join_struct)1834_storage"
      },
      "t_mapping(t_uint256,t_struct(message_read_struct)1813_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.message_read_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_read_struct)1813_storage"
      },
      "t_mapping(t_uint256,t_struct(message_struct)1804_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.message_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(message_struct)1804_storage"
      },
      "t_mapping(t_uint256,t_struct(reply_struct)1822_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.reply_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(reply_struct)1822_storage"
      },
      "t_mapping(t_uint256,t_struct(smart_contract_uri_struct)1788_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.smart_contract_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(smart_contract_uri_struct)1788_storage"
      },
      "t_mapping(t_uint256,t_struct(user_badge_struct)1853_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOnation.user_badge_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(user_badge_struct)1853_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)1762_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.dao_uri_struct",
        "members": [
          {
            "astId": 1757,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1759,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1761,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(donation_struct)1781_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.donation_struct",
        "members": [
          {
            "astId": 1776,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1778,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "userid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1780,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(feed_struct)1862_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.feed_struct",
        "members": [
          {
            "astId": 1855,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "feed_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1857,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1859,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "Type",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1861,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(goal_ideas_votes_struct)1795_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 1790,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1792,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1794,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)1767_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.goal_uri_struct",
        "members": [
          {
            "astId": 1764,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1766,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)1774_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.ideas_uri_struct",
        "members": [
          {
            "astId": 1769,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1771,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1773,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "donation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(join_struct)1834_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.join_struct",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "daoId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1831,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1833,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "joined_date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(message_read_struct)1813_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.message_read_struct",
        "members": [
          {
            "astId": 1806,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1808,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1810,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1812,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "msg_type",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(message_struct)1804_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.message_struct",
        "members": [
          {
            "astId": 1797,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "message_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1799,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1801,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "message",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1803,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "sender",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(reply_struct)1822_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.reply_struct",
        "members": [
          {
            "astId": 1815,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "reply_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1817,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "message_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1819,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "message",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(smart_contract_uri_struct)1788_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.smart_contract_uri_struct",
        "members": [
          {
            "astId": 1783,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "smart_contract_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1785,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1787,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "smart_contract_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(user_badge_struct)1853_storage": {
        "encoding": "inplace",
        "label": "struct DAOnation.user_badge_struct",
        "members": [
          {
            "astId": 1836,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1838,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "dao",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1840,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "joined",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1842,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "goal",
            "offset": 2,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1844,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "ideas",
            "offset": 3,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1846,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "vote",
            "offset": 4,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1848,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "donation",
            "offset": 5,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1850,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "comment",
            "offset": 6,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1852,
            "contract": "contracts/DAOnation.sol:DAOnation",
            "label": "reply",
            "offset": 7,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}