{
  "address": "0x7f01e95F9313153Cca8F0Dff2Ced6607884D9F84",
  "abi": [
    {
      "inputs": [],
      "name": "_bid_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_bid_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bidder",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_event_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_event_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "event_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "event_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "raised",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feed_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_feeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feed_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Type",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_nft_ids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_nft_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "highest_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highest_bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "highest_bidder",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "feed_text",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_type",
          "type": "string"
        }
      ],
      "name": "add_Feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_event_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_doantion",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "add_donation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bidder",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bidder_userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "bid_nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_event_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_event_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_dao_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "create_event",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "distribute_nft_to_highest_bidder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sender_wallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "highest_bidder",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_feed",
          "type": "string"
        }
      ],
      "name": "donate_nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "get_event_nft_count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "get_event_reached",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00cf103cf3469aad3fb6bba0a01787637bf0a4aa9757a45674da6a16deea1663",
  "receipt": {
    "to": null,
    "from": "0x610Cd980BeF747451152e8F0fF16A19A451F7a43",
    "contractAddress": "0x7f01e95F9313153Cca8F0Dff2Ced6607884D9F84",
    "transactionIndex": 0,
    "gasUsed": "2537002",
    "logsBloom": "0x
    "blockHash": "0x099f6395d6f022b6d43e3a61d81533ff2f3c53ed3bd6e4d083aeb3f6aaecbccc",
    "transactionHash": "0x00cf103cf3469aad3fb6bba0a01787637bf0a4aa9757a45674da6a16deea1663",
    "logs": [],
    "blockNumber": 3925542,
    "cumulativeGasUsed": "2537002",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e5f6c5cac42b43782f37b6e222f96aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"_bid_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_bid_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bidder\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_event_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_event_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"event_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"event_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feed_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_feeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feed_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_nft_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highest_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest_bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"highest_bidder\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"feed_text\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"add_Feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_event_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_doantion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"add_donation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bidder\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bidder_userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"bid_nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_event_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_event_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_dao_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"create_event\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"distribute_nft_to_highest_bidder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"highest_bidder\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_feed\",\"type\":\"string\"}],\"name\":\"donate_nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"get_event_nft_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"get_event_reached\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAOAuction.sol\":\"DAOAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/DAOAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\n\\r\\ncontract DAOAuction {\\r\\n  struct event_uri_struct {\\r\\n    string dao_id;\\r\\n    uint256 user_id;\\r\\n    string event_uri;\\r\\n    address event_wallet;\\r\\n    uint256 raised;\\r\\n    string status;\\r\\n  }\\r\\n  struct nft_uri_struct {\\r\\n    uint256 event_id;\\r\\n    string name;\\r\\n    string date;\\r\\n    string url;\\r\\n    string description;\\r\\n    address sender_wallet;\\r\\n    uint256 highest_amount;\\r\\n    uint256 highest_bidder_userid;\\r\\n    string highest_bidder;\\r\\n  }\\r\\n  struct bid_uri_struct {\\r\\n    uint256 nft_id;\\r\\n    string date;\\r\\n     address  walletAddress;\\r\\n    string bidder;\\r\\n    uint256 bidder_userid;\\r\\n    uint256 bidAmount;\\r\\n  }\\r\\n\\r\\n  struct feed_struct {\\r\\n    uint256 feed_id;\\r\\n    uint256 date;\\r\\n    string Type;\\r\\n    string data;\\r\\n  }\\r\\n\\r\\n  uint256 public _event_ids;\\r\\n  uint256 public _nft_ids;\\r\\n  uint256 public _bid_ids;\\r\\n  uint256 public _feed_ids;\\r\\n\\r\\n  mapping(uint256 => event_uri_struct) public _event_uris; //_event_ids                  => (Event)                    event uri struct\\r\\n  mapping(uint256 => nft_uri_struct) public _nft_uris; //_nft_ids                  => (NFT)                    nft uri struct\\r\\n  mapping(uint256 => bid_uri_struct) public _bid_uris; //_bid_ids                  => (NFT)                    bid uri struct\\r\\n  mapping(uint256 => feed_struct) public _feeds; //_feed_ids            => (feed_struct)\\r\\n\\r\\n  //Events\\r\\n  function create_event(string memory _event_uri, address _event_wallet, string memory _dao_id, uint256 _user_id, string memory _feed) public returns (uint256) {\\r\\n    //Create Event into _event_uris\\r\\n    _event_uris[_event_ids] = event_uri_struct(_dao_id, _user_id, _event_uri, _event_wallet, 0, '0');\\r\\n\\r\\n    _event_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'event');\\r\\n    return _event_ids;\\r\\n  }\\r\\n\\r\\n  function donate_nft(uint256 event_id, string memory name, string memory url, string memory description, address sender_wallet,  string memory date, uint256 amount,uint256 userid, string memory highest_bidder, string memory _feed) public  returns (uint256) {\\r\\n    //Create Event into _event_uris\\r\\n    _nft_uris[_nft_ids] = nft_uri_struct(event_id, name,date, url, description, sender_wallet, amount, userid,highest_bidder);\\r\\n\\r\\n    _nft_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'donate_nft');\\r\\n    return _nft_ids;\\r\\n  }\\r\\n\\r\\n  function add_donation(uint256  _event_id, uint256 _doantion, string memory _feed) public payable {\\r\\n    add_Feed(_feed, 'donation');\\r\\n\\r\\n    _event_uris[_event_id].raised += _doantion;\\r\\n  }\\r\\n  \\r\\n\\r\\n  function bid_nft(uint256 nft_id, string memory date, address walletAddress,   string memory bidder,uint256 bidder_userid,uint256 amount, string memory _feed) public payable  returns (uint256) {\\r\\n    //Bid NFT\\r\\n    _bid_uris[_bid_ids] = bid_uri_struct(nft_id,  date, walletAddress,bidder,bidder_userid, amount);\\r\\n    _nft_uris[nft_id].highest_amount = amount;\\r\\n    _nft_uris[nft_id].highest_bidder_userid = bidder_userid;\\r\\n    _nft_uris[nft_id].highest_bidder = bidder;\\r\\n\\r\\n    _bid_ids++;\\r\\n\\r\\n    add_Feed(_feed, 'bid_nft');\\r\\n    return _bid_ids;\\r\\n  }\\r\\n\\r\\n  function get_event_reached(uint256 event_id) public view returns(uint256){\\r\\n    uint256 total = 0;\\r\\n    for (uint256 i = 0; i < _nft_ids; i++) {\\r\\n       nft_uri_struct memory nft = _nft_uris[i];\\r\\n      if (nft.event_id == event_id){\\r\\n        total += nft.highest_amount;\\r\\n      }\\r\\n    }\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function get_event_nft_count(uint256 event_id) public view returns(uint256){\\r\\n    uint256 total = 0;\\r\\n    for (uint256 i = 0; i < _nft_ids; i++) {\\r\\n       nft_uri_struct memory nft = _nft_uris[i];\\r\\n      if (nft.event_id ==event_id){\\r\\n        total += 1;\\r\\n      }\\r\\n    }\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function distribute_nft_to_highest_bidder(uint256 event_id)public payable{\\r\\n      for (uint256 i = 0; i < _bid_ids; i++) {\\r\\n         bid_uri_struct memory biduri = _bid_uris[i];\\r\\n         nft_uri_struct memory nft = _nft_uris[biduri.nft_id];\\r\\n        if (nft.event_id == event_id){\\r\\n          if (biduri.bidder_userid == nft.highest_bidder_userid){\\r\\n            // Highest Bidder of the nft\\r\\n            // Send the money to event wallet\\r\\n            address eventWallet = biduri.walletAddress;\\r\\n           payable(eventWallet).transfer(biduri.bidAmount);\\r\\n\\r\\n            // Send nft to highest bidder \\r\\n            \\r\\n            _nft_uris[biduri.nft_id].sender_wallet = biduri.walletAddress;\\r\\n\\r\\n          }else{\\r\\n            // Lowest bidders of the nft\\r\\n            // Send the money to bidders\\r\\n            address nftWallet = biduri.walletAddress;\\r\\n            payable(nftWallet).transfer(biduri.bidAmount);\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      _event_uris[event_id].status = \\\"ended\\\";\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  function add_Feed(string memory feed_text, string memory _type) public {\\r\\n    _feeds[_feed_ids] = feed_struct(_feed_ids, block.timestamp, _type, feed_text);\\r\\n    _feed_ids++;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5bf4158b4d5d630954cd74eff727b9b6bbf430d6a45a95e1e2e0a8efc9cc68b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cfa806100206000396000f3fe6080604052600436106100f35760003560e01c806368fbe27e1161008a5780638ac4110c116100595780638ac4110c14610397578063bda00335146103c2578063db9ecaca146103eb578063e3863cef14610416576100f3565b806368fbe27e146102bd57806369e114fa146102ff578063722f75921461032a5780637dcac8611461036c576100f3565b806352e7ddff116100c657806352e7ddff146101e757806354a9fb181461022457806358b087e01461026457806363d98c34146102a1576100f3565b80630af999e3146100f857806310b34cd3146101355780632159200114610172578063225bb52a146101a2575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612097565b610432565b60405161012c91906120d3565b60405180910390f35b34801561014157600080fd5b5061015c60048036038101906101579190612292565b6107f3565b60405161016991906120d3565b60405180910390f35b61018c60048036038101906101879190612361565b610986565b60405161019991906120d3565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190612097565b610b35565b6040516101de999897969594939291906124e5565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190612097565b610e4b565b60405161021b91906120d3565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190612097565b611209565b60405161025b9493929190612595565b60405180910390f35b34801561027057600080fd5b5061028b600480360381019061028691906125e8565b611349565b60405161029891906120d3565b60405180910390f35b6102bb60048036038101906102b69190612097565b6114f7565b005b3480156102c957600080fd5b506102e460048036038101906102df9190612097565b611bcd565b6040516102f69695949392919061276f565b60405180910390f35b34801561030b57600080fd5b50610314611d39565b60405161032191906120d3565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612097565b611d3f565b604051610363969594939291906127de565b60405180910390f35b34801561037857600080fd5b50610381611f33565b60405161038e91906120d3565b60405180910390f35b3480156103a357600080fd5b506103ac611f39565b6040516103b991906120d3565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190612854565b611f3f565b005b3480156103f757600080fd5b50610400611fd6565b60405161040d91906120d3565b60405180910390f35b610430600480360381019061042b91906128cc565b611fdc565b005b6000806000905060005b6001548110156107e95760006005600083815260200190815260200160002060405180610120016040529081600082015481526020016001820180546104819061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ad9061296a565b80156104fa5780601f106104cf576101008083540402835291602001916104fa565b820191906000526020600020905b8154815290600101906020018083116104dd57829003601f168201915b505050505081526020016002820180546105139061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461053f9061296a565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b505050505081526020016003820180546105a59061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d19061296a565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081526020016004820180546106379061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546106639061296a565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820180546107339061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461075f9061296a565b80156107ac5780601f10610781576101008083540402835291602001916107ac565b820191906000526020600020905b81548152906001019060200180831161078f57829003601f168201915b5050505050815250509050848160000151036107d5578060c00151836107d291906129ca565b92505b5080806107e1906129fe565b91505061043c565b5080915050919050565b60006040518060c001604052808581526020018481526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250815250600460008054815260200190815260200160002060008201518160000190816108979190612bf2565b506020820151816001015560408201518160020190816108b79190612bf2565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a082015181600501908161091e9190612bf2565b50905050600080815480929190610934906129fe565b9190505550610978826040518060400160405280600581526020017f6576656e74000000000000000000000000000000000000000000000000000000815250611f3f565b600054905095945050505050565b60006040518060c001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506006600060025481526020019081526020016000206000820151816000015560208201518160010190816109ff9190612bf2565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081610a5c9190612bf2565b506080820151816004015560a0820151816005015590505082600560008a81526020019081526020016000206006018190555083600560008a81526020019081526020016000206007018190555084600560008a81526020019081526020016000206008019081610acd9190612bf2565b5060026000815480929190610ae1906129fe565b9190505550610b25826040518060400160405280600781526020017f6269645f6e667400000000000000000000000000000000000000000000000000815250611f3f565b6002549050979650505050505050565b6005602052806000526040600020600091509050806000015490806001018054610b5e9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a9061296a565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b505050505090806002018054610bec9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c189061296a565b8015610c655780601f10610c3a57610100808354040283529160200191610c65565b820191906000526020600020905b815481529060010190602001808311610c4857829003601f168201915b505050505090806003018054610c7a9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca69061296a565b8015610cf35780601f10610cc857610100808354040283529160200191610cf3565b820191906000526020600020905b815481529060010190602001808311610cd657829003601f168201915b505050505090806004018054610d089061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d349061296a565b8015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b5050505050908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806006015490806007015490806008018054610dc89061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610df49061296a565b8015610e415780601f10610e1657610100808354040283529160200191610e41565b820191906000526020600020905b815481529060010190602001808311610e2457829003601f168201915b5050505050905089565b6000806000905060005b6001548110156111ff576000600560008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054610e9a9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec69061296a565b8015610f135780601f10610ee857610100808354040283529160200191610f13565b820191906000526020600020905b815481529060010190602001808311610ef657829003601f168201915b50505050508152602001600282018054610f2c9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f589061296a565b8015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b50505050508152602001600382018054610fbe9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610fea9061296a565b80156110375780601f1061100c57610100808354040283529160200191611037565b820191906000526020600020905b81548152906001019060200180831161101a57829003601f168201915b505050505081526020016004820180546110509061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461107c9061296a565b80156110c95780601f1061109e576101008083540402835291602001916110c9565b820191906000526020600020905b8154815290600101906020018083116110ac57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820154815260200160088201805461114c9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546111789061296a565b80156111c55780601f1061119a576101008083540402835291602001916111c5565b820191906000526020600020905b8154815290600101906020018083116111a857829003601f168201915b5050505050815250509050848160000151036111eb576001836111e891906129ca565b92505b5080806111f7906129fe565b915050610e55565b5080915050919050565b60076020528060005260406000206000915090508060000154908060010154908060020180546112389061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546112649061296a565b80156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b5050505050908060030180546112c69061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546112f29061296a565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b5050505050905084565b60006040518061012001604052808c81526020018b81526020018781526020018a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506005600060015481526020019081526020016000206000820151816000015560208201518160010190816113d59190612bf2565b5060408201518160020190816113eb9190612bf2565b5060608201518160030190816114019190612bf2565b5060808201518160040190816114179190612bf2565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e082015181600701556101008201518160080190816114899190612bf2565b50905050600160008154809291906114a0906129fe565b91905055506114e4826040518060400160405280600a81526020017f646f6e6174655f6e667400000000000000000000000000000000000000000000815250611f3f565b60015490509a9950505050505050505050565b60005b600254811015611b70576000600660008381526020019081526020016000206040518060c00160405290816000820154815260200160018201805461153e9061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461156a9061296a565b80156115b75780601f1061158c576101008083540402835291602001916115b7565b820191906000526020600020905b81548152906001019060200180831161159a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546116269061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546116529061296a565b801561169f5780601f106116745761010080835404028352916020019161169f565b820191906000526020600020905b81548152906001019060200180831161168257829003601f168201915b505050505081526020016004820154815260200160058201548152505090506000600560008360000151815260200190815260200160002060405180610120016040529081600082015481526020016001820180546116fd9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546117299061296a565b80156117765780601f1061174b57610100808354040283529160200191611776565b820191906000526020600020905b81548152906001019060200180831161175957829003601f168201915b5050505050815260200160028201805461178f9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb9061296a565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b505050505081526020016003820180546118219061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461184d9061296a565b801561189a5780601f1061186f5761010080835404028352916020019161189a565b820191906000526020600020905b81548152906001019060200180831161187d57829003601f168201915b505050505081526020016004820180546118b39061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546118df9061296a565b801561192c5780601f106119015761010080835404028352916020019161192c565b820191906000526020600020905b81548152906001019060200180831161190f57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820180546119af9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546119db9061296a565b8015611a285780601f106119fd57610100808354040283529160200191611a28565b820191906000526020600020905b815481529060010190602001808311611a0b57829003601f168201915b505050505081525050905083816000015103611b5b578060e00151826080015103611b04576000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f19350505050158015611aa0573d6000803e3d6000fd5b508260400151600560008560000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611b5a565b6000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f19350505050158015611b57573d6000803e3d6000fd5b50505b5b50508080611b68906129fe565b9150506114fa565b506040518060400160405280600581526020017f656e646564000000000000000000000000000000000000000000000000000000815250600460008381526020019081526020016000206005019081611bc99190612bf2565b5050565b6006602052806000526040600020600091509050806000015490806001018054611bf69061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c229061296a565b8015611c6f5780601f10611c4457610100808354040283529160200191611c6f565b820191906000526020600020905b815481529060010190602001808311611c5257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054611caa9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd69061296a565b8015611d235780601f10611cf857610100808354040283529160200191611d23565b820191906000526020600020905b815481529060010190602001808311611d0657829003601f168201915b5050505050908060040154908060050154905086565b60005481565b6004602052806000526040600020600091509050806000018054611d629061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8e9061296a565b8015611ddb5780601f10611db057610100808354040283529160200191611ddb565b820191906000526020600020905b815481529060010190602001808311611dbe57829003601f168201915b505050505090806001015490806002018054611df69061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e229061296a565b8015611e6f5780601f10611e4457610100808354040283529160200191611e6f565b820191906000526020600020905b815481529060010190602001808311611e5257829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004015490806005018054611eb09061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611edc9061296a565b8015611f295780601f10611efe57610100808354040283529160200191611f29565b820191906000526020600020905b815481529060010190602001808311611f0c57829003601f168201915b5050505050905086565b60025481565b60035481565b604051806080016040528060035481526020014281526020018281526020018381525060076000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fa09190612bf2565b506060820151816003019081611fb69190612bf2565b5090505060036000815480929190611fcd906129fe565b91905055505050565b60015481565b61201b816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250611f3f565b8160046000858152602001908152602001600020600401600082825461204191906129ca565b92505081905550505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61207481612061565b811461207f57600080fd5b50565b6000813590506120918161206b565b92915050565b6000602082840312156120ad576120ac612057565b5b60006120bb84828501612082565b91505092915050565b6120cd81612061565b82525050565b60006020820190506120e860008301846120c4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612141826120f8565b810181811067ffffffffffffffff821117156121605761215f612109565b5b80604052505050565b600061217361204d565b905061217f8282612138565b919050565b600067ffffffffffffffff82111561219f5761219e612109565b5b6121a8826120f8565b9050602081019050919050565b82818337600083830152505050565b60006121d76121d284612184565b612169565b9050828152602081018484840111156121f3576121f26120f3565b5b6121fe8482856121b5565b509392505050565b600082601f83011261221b5761221a6120ee565b5b813561222b8482602086016121c4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061225f82612234565b9050919050565b61226f81612254565b811461227a57600080fd5b50565b60008135905061228c81612266565b92915050565b600080600080600060a086880312156122ae576122ad612057565b5b600086013567ffffffffffffffff8111156122cc576122cb61205c565b5b6122d888828901612206565b95505060206122e98882890161227d565b945050604086013567ffffffffffffffff81111561230a5761230961205c565b5b61231688828901612206565b935050606061232788828901612082565b925050608086013567ffffffffffffffff8111156123485761234761205c565b5b61235488828901612206565b9150509295509295909350565b600080600080600080600060e0888a0312156123805761237f612057565b5b600061238e8a828b01612082565b975050602088013567ffffffffffffffff8111156123af576123ae61205c565b5b6123bb8a828b01612206565b96505060406123cc8a828b0161227d565b955050606088013567ffffffffffffffff8111156123ed576123ec61205c565b5b6123f98a828b01612206565b945050608061240a8a828b01612082565b93505060a061241b8a828b01612082565b92505060c088013567ffffffffffffffff81111561243c5761243b61205c565b5b6124488a828b01612206565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015612491578082015181840152602081019050612476565b60008484015250505050565b60006124a882612457565b6124b28185612462565b93506124c2818560208601612473565b6124cb816120f8565b840191505092915050565b6124df81612254565b82525050565b6000610120820190506124fb600083018c6120c4565b818103602083015261250d818b61249d565b90508181036040830152612521818a61249d565b90508181036060830152612535818961249d565b90508181036080830152612549818861249d565b905061255860a08301876124d6565b61256560c08301866120c4565b61257260e08301856120c4565b818103610100830152612585818461249d565b90509a9950505050505050505050565b60006080820190506125aa60008301876120c4565b6125b760208301866120c4565b81810360408301526125c9818561249d565b905081810360608301526125dd818461249d565b905095945050505050565b6000806000806000806000806000806101408b8d03121561260c5761260b612057565b5b600061261a8d828e01612082565b9a505060208b013567ffffffffffffffff81111561263b5761263a61205c565b5b6126478d828e01612206565b99505060408b013567ffffffffffffffff8111156126685761266761205c565b5b6126748d828e01612206565b98505060608b013567ffffffffffffffff8111156126955761269461205c565b5b6126a18d828e01612206565b97505060806126b28d828e0161227d565b96505060a08b013567ffffffffffffffff8111156126d3576126d261205c565b5b6126df8d828e01612206565b95505060c06126f08d828e01612082565b94505060e06127018d828e01612082565b9350506101008b013567ffffffffffffffff8111156127235761272261205c565b5b61272f8d828e01612206565b9250506101208b013567ffffffffffffffff8111156127515761275061205c565b5b61275d8d828e01612206565b9150509295989b9194979a5092959850565b600060c08201905061278460008301896120c4565b8181036020830152612796818861249d565b90506127a560408301876124d6565b81810360608301526127b7818661249d565b90506127c660808301856120c4565b6127d360a08301846120c4565b979650505050505050565b600060c08201905081810360008301526127f8818961249d565b905061280760208301886120c4565b8181036040830152612819818761249d565b905061282860608301866124d6565b61283560808301856120c4565b81810360a0830152612847818461249d565b9050979650505050505050565b6000806040838503121561286b5761286a612057565b5b600083013567ffffffffffffffff8111156128895761288861205c565b5b61289585828601612206565b925050602083013567ffffffffffffffff8111156128b6576128b561205c565b5b6128c285828601612206565b9150509250929050565b6000806000606084860312156128e5576128e4612057565b5b60006128f386828701612082565b935050602061290486828701612082565b925050604084013567ffffffffffffffff8111156129255761292461205c565b5b61293186828701612206565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061298257607f821691505b6020821081036129955761299461293b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129d582612061565b91506129e083612061565b92508282019050808211156129f8576129f761299b565b5b92915050565b6000612a0982612061565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a3b57612a3a61299b565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612aa87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a6b565b612ab28683612a6b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612aef612aea612ae584612061565b612aca565b612061565b9050919050565b6000819050919050565b612b0983612ad4565b612b1d612b1582612af6565b848454612a78565b825550505050565b600090565b612b32612b25565b612b3d818484612b00565b505050565b5b81811015612b6157612b56600082612b2a565b600181019050612b43565b5050565b601f821115612ba657612b7781612a46565b612b8084612a5b565b81016020851015612b8f578190505b612ba3612b9b85612a5b565b830182612b42565b50505b505050565b600082821c905092915050565b6000612bc960001984600802612bab565b1980831691505092915050565b6000612be28383612bb8565b9150826002028217905092915050565b612bfb82612457565b67ffffffffffffffff811115612c1457612c13612109565b5b612c1e825461296a565b612c29828285612b65565b600060209050601f831160018114612c5c5760008415612c4a578287015190505b612c548582612bd6565b865550612cbc565b601f198416612c6a86612a46565b60005b82811015612c9257848901518255600182019150602085019450602081019050612c6d565b86831015612caf5784890151612cab601f891682612bb8565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220dbb8454c12f5dd212e685ce73bb2111c7ea397d2775737f9707eb70695a313cc64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806368fbe27e1161008a5780638ac4110c116100595780638ac4110c14610397578063bda00335146103c2578063db9ecaca146103eb578063e3863cef14610416576100f3565b806368fbe27e146102bd57806369e114fa146102ff578063722f75921461032a5780637dcac8611461036c576100f3565b806352e7ddff116100c657806352e7ddff146101e757806354a9fb181461022457806358b087e01461026457806363d98c34146102a1576100f3565b80630af999e3146100f857806310b34cd3146101355780632159200114610172578063225bb52a146101a2575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612097565b610432565b60405161012c91906120d3565b60405180910390f35b34801561014157600080fd5b5061015c60048036038101906101579190612292565b6107f3565b60405161016991906120d3565b60405180910390f35b61018c60048036038101906101879190612361565b610986565b60405161019991906120d3565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190612097565b610b35565b6040516101de999897969594939291906124e5565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190612097565b610e4b565b60405161021b91906120d3565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190612097565b611209565b60405161025b9493929190612595565b60405180910390f35b34801561027057600080fd5b5061028b600480360381019061028691906125e8565b611349565b60405161029891906120d3565b60405180910390f35b6102bb60048036038101906102b69190612097565b6114f7565b005b3480156102c957600080fd5b506102e460048036038101906102df9190612097565b611bcd565b6040516102f69695949392919061276f565b60405180910390f35b34801561030b57600080fd5b50610314611d39565b60405161032191906120d3565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612097565b611d3f565b604051610363969594939291906127de565b60405180910390f35b34801561037857600080fd5b50610381611f33565b60405161038e91906120d3565b60405180910390f35b3480156103a357600080fd5b506103ac611f39565b6040516103b991906120d3565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190612854565b611f3f565b005b3480156103f757600080fd5b50610400611fd6565b60405161040d91906120d3565b60405180910390f35b610430600480360381019061042b91906128cc565b611fdc565b005b6000806000905060005b6001548110156107e95760006005600083815260200190815260200160002060405180610120016040529081600082015481526020016001820180546104819061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ad9061296a565b80156104fa5780601f106104cf576101008083540402835291602001916104fa565b820191906000526020600020905b8154815290600101906020018083116104dd57829003601f168201915b505050505081526020016002820180546105139061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461053f9061296a565b801561058c5780601f106105615761010080835404028352916020019161058c565b820191906000526020600020905b81548152906001019060200180831161056f57829003601f168201915b505050505081526020016003820180546105a59061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546105d19061296a565b801561061e5780601f106105f35761010080835404028352916020019161061e565b820191906000526020600020905b81548152906001019060200180831161060157829003601f168201915b505050505081526020016004820180546106379061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546106639061296a565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820180546107339061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461075f9061296a565b80156107ac5780601f10610781576101008083540402835291602001916107ac565b820191906000526020600020905b81548152906001019060200180831161078f57829003601f168201915b5050505050815250509050848160000151036107d5578060c00151836107d291906129ca565b92505b5080806107e1906129fe565b91505061043c565b5080915050919050565b60006040518060c001604052808581526020018481526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250815250600460008054815260200190815260200160002060008201518160000190816108979190612bf2565b506020820151816001015560408201518160020190816108b79190612bf2565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a082015181600501908161091e9190612bf2565b50905050600080815480929190610934906129fe565b9190505550610978826040518060400160405280600581526020017f6576656e74000000000000000000000000000000000000000000000000000000815250611f3f565b600054905095945050505050565b60006040518060c001604052808981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506006600060025481526020019081526020016000206000820151816000015560208201518160010190816109ff9190612bf2565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019081610a5c9190612bf2565b506080820151816004015560a0820151816005015590505082600560008a81526020019081526020016000206006018190555083600560008a81526020019081526020016000206007018190555084600560008a81526020019081526020016000206008019081610acd9190612bf2565b5060026000815480929190610ae1906129fe565b9190505550610b25826040518060400160405280600781526020017f6269645f6e667400000000000000000000000000000000000000000000000000815250611f3f565b6002549050979650505050505050565b6005602052806000526040600020600091509050806000015490806001018054610b5e9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a9061296a565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b505050505090806002018054610bec9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c189061296a565b8015610c655780601f10610c3a57610100808354040283529160200191610c65565b820191906000526020600020905b815481529060010190602001808311610c4857829003601f168201915b505050505090806003018054610c7a9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca69061296a565b8015610cf35780601f10610cc857610100808354040283529160200191610cf3565b820191906000526020600020905b815481529060010190602001808311610cd657829003601f168201915b505050505090806004018054610d089061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d349061296a565b8015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b5050505050908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806006015490806007015490806008018054610dc89061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610df49061296a565b8015610e415780601f10610e1657610100808354040283529160200191610e41565b820191906000526020600020905b815481529060010190602001808311610e2457829003601f168201915b5050505050905089565b6000806000905060005b6001548110156111ff576000600560008381526020019081526020016000206040518061012001604052908160008201548152602001600182018054610e9a9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec69061296a565b8015610f135780601f10610ee857610100808354040283529160200191610f13565b820191906000526020600020905b815481529060010190602001808311610ef657829003601f168201915b50505050508152602001600282018054610f2c9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f589061296a565b8015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b50505050508152602001600382018054610fbe9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054610fea9061296a565b80156110375780601f1061100c57610100808354040283529160200191611037565b820191906000526020600020905b81548152906001019060200180831161101a57829003601f168201915b505050505081526020016004820180546110509061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461107c9061296a565b80156110c95780601f1061109e576101008083540402835291602001916110c9565b820191906000526020600020905b8154815290600101906020018083116110ac57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820154815260200160088201805461114c9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546111789061296a565b80156111c55780601f1061119a576101008083540402835291602001916111c5565b820191906000526020600020905b8154815290600101906020018083116111a857829003601f168201915b5050505050815250509050848160000151036111eb576001836111e891906129ca565b92505b5080806111f7906129fe565b915050610e55565b5080915050919050565b60076020528060005260406000206000915090508060000154908060010154908060020180546112389061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546112649061296a565b80156112b15780601f10611286576101008083540402835291602001916112b1565b820191906000526020600020905b81548152906001019060200180831161129457829003601f168201915b5050505050908060030180546112c69061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546112f29061296a565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b5050505050905084565b60006040518061012001604052808c81526020018b81526020018781526020018a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152506005600060015481526020019081526020016000206000820151816000015560208201518160010190816113d59190612bf2565b5060408201518160020190816113eb9190612bf2565b5060608201518160030190816114019190612bf2565b5060808201518160040190816114179190612bf2565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e082015181600701556101008201518160080190816114899190612bf2565b50905050600160008154809291906114a0906129fe565b91905055506114e4826040518060400160405280600a81526020017f646f6e6174655f6e667400000000000000000000000000000000000000000000815250611f3f565b60015490509a9950505050505050505050565b60005b600254811015611b70576000600660008381526020019081526020016000206040518060c00160405290816000820154815260200160018201805461153e9061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461156a9061296a565b80156115b75780601f1061158c576101008083540402835291602001916115b7565b820191906000526020600020905b81548152906001019060200180831161159a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546116269061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546116529061296a565b801561169f5780601f106116745761010080835404028352916020019161169f565b820191906000526020600020905b81548152906001019060200180831161168257829003601f168201915b505050505081526020016004820154815260200160058201548152505090506000600560008360000151815260200190815260200160002060405180610120016040529081600082015481526020016001820180546116fd9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546117299061296a565b80156117765780601f1061174b57610100808354040283529160200191611776565b820191906000526020600020905b81548152906001019060200180831161175957829003601f168201915b5050505050815260200160028201805461178f9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546117bb9061296a565b80156118085780601f106117dd57610100808354040283529160200191611808565b820191906000526020600020905b8154815290600101906020018083116117eb57829003601f168201915b505050505081526020016003820180546118219061296a565b80601f016020809104026020016040519081016040528092919081815260200182805461184d9061296a565b801561189a5780601f1061186f5761010080835404028352916020019161189a565b820191906000526020600020905b81548152906001019060200180831161187d57829003601f168201915b505050505081526020016004820180546118b39061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546118df9061296a565b801561192c5780601f106119015761010080835404028352916020019161192c565b820191906000526020600020905b81548152906001019060200180831161190f57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820180546119af9061296a565b80601f01602080910402602001604051908101604052809291908181526020018280546119db9061296a565b8015611a285780601f106119fd57610100808354040283529160200191611a28565b820191906000526020600020905b815481529060010190602001808311611a0b57829003601f168201915b505050505081525050905083816000015103611b5b578060e00151826080015103611b04576000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f19350505050158015611aa0573d6000803e3d6000fd5b508260400151600560008560000151815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611b5a565b6000826040015190508073ffffffffffffffffffffffffffffffffffffffff166108fc8460a001519081150290604051600060405180830381858888f19350505050158015611b57573d6000803e3d6000fd5b50505b5b50508080611b68906129fe565b9150506114fa565b506040518060400160405280600581526020017f656e646564000000000000000000000000000000000000000000000000000000815250600460008381526020019081526020016000206005019081611bc99190612bf2565b5050565b6006602052806000526040600020600091509050806000015490806001018054611bf69061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611c229061296a565b8015611c6f5780601f10611c4457610100808354040283529160200191611c6f565b820191906000526020600020905b815481529060010190602001808311611c5257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054611caa9061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd69061296a565b8015611d235780601f10611cf857610100808354040283529160200191611d23565b820191906000526020600020905b815481529060010190602001808311611d0657829003601f168201915b5050505050908060040154908060050154905086565b60005481565b6004602052806000526040600020600091509050806000018054611d629061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8e9061296a565b8015611ddb5780601f10611db057610100808354040283529160200191611ddb565b820191906000526020600020905b815481529060010190602001808311611dbe57829003601f168201915b505050505090806001015490806002018054611df69061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611e229061296a565b8015611e6f5780601f10611e4457610100808354040283529160200191611e6f565b820191906000526020600020905b815481529060010190602001808311611e5257829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004015490806005018054611eb09061296a565b80601f0160208091040260200160405190810160405280929190818152602001828054611edc9061296a565b8015611f295780601f10611efe57610100808354040283529160200191611f29565b820191906000526020600020905b815481529060010190602001808311611f0c57829003601f168201915b5050505050905086565b60025481565b60035481565b604051806080016040528060035481526020014281526020018281526020018381525060076000600354815260200190815260200160002060008201518160000155602082015181600101556040820151816002019081611fa09190612bf2565b506060820151816003019081611fb69190612bf2565b5090505060036000815480929190611fcd906129fe565b91905055505050565b60015481565b61201b816040518060400160405280600881526020017f646f6e6174696f6e000000000000000000000000000000000000000000000000815250611f3f565b8160046000858152602001908152602001600020600401600082825461204191906129ca565b92505081905550505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61207481612061565b811461207f57600080fd5b50565b6000813590506120918161206b565b92915050565b6000602082840312156120ad576120ac612057565b5b60006120bb84828501612082565b91505092915050565b6120cd81612061565b82525050565b60006020820190506120e860008301846120c4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612141826120f8565b810181811067ffffffffffffffff821117156121605761215f612109565b5b80604052505050565b600061217361204d565b905061217f8282612138565b919050565b600067ffffffffffffffff82111561219f5761219e612109565b5b6121a8826120f8565b9050602081019050919050565b82818337600083830152505050565b60006121d76121d284612184565b612169565b9050828152602081018484840111156121f3576121f26120f3565b5b6121fe8482856121b5565b509392505050565b600082601f83011261221b5761221a6120ee565b5b813561222b8482602086016121c4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061225f82612234565b9050919050565b61226f81612254565b811461227a57600080fd5b50565b60008135905061228c81612266565b92915050565b600080600080600060a086880312156122ae576122ad612057565b5b600086013567ffffffffffffffff8111156122cc576122cb61205c565b5b6122d888828901612206565b95505060206122e98882890161227d565b945050604086013567ffffffffffffffff81111561230a5761230961205c565b5b61231688828901612206565b935050606061232788828901612082565b925050608086013567ffffffffffffffff8111156123485761234761205c565b5b61235488828901612206565b9150509295509295909350565b600080600080600080600060e0888a0312156123805761237f612057565b5b600061238e8a828b01612082565b975050602088013567ffffffffffffffff8111156123af576123ae61205c565b5b6123bb8a828b01612206565b96505060406123cc8a828b0161227d565b955050606088013567ffffffffffffffff8111156123ed576123ec61205c565b5b6123f98a828b01612206565b945050608061240a8a828b01612082565b93505060a061241b8a828b01612082565b92505060c088013567ffffffffffffffff81111561243c5761243b61205c565b5b6124488a828b01612206565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015612491578082015181840152602081019050612476565b60008484015250505050565b60006124a882612457565b6124b28185612462565b93506124c2818560208601612473565b6124cb816120f8565b840191505092915050565b6124df81612254565b82525050565b6000610120820190506124fb600083018c6120c4565b818103602083015261250d818b61249d565b90508181036040830152612521818a61249d565b90508181036060830152612535818961249d565b90508181036080830152612549818861249d565b905061255860a08301876124d6565b61256560c08301866120c4565b61257260e08301856120c4565b818103610100830152612585818461249d565b90509a9950505050505050505050565b60006080820190506125aa60008301876120c4565b6125b760208301866120c4565b81810360408301526125c9818561249d565b905081810360608301526125dd818461249d565b905095945050505050565b6000806000806000806000806000806101408b8d03121561260c5761260b612057565b5b600061261a8d828e01612082565b9a505060208b013567ffffffffffffffff81111561263b5761263a61205c565b5b6126478d828e01612206565b99505060408b013567ffffffffffffffff8111156126685761266761205c565b5b6126748d828e01612206565b98505060608b013567ffffffffffffffff8111156126955761269461205c565b5b6126a18d828e01612206565b97505060806126b28d828e0161227d565b96505060a08b013567ffffffffffffffff8111156126d3576126d261205c565b5b6126df8d828e01612206565b95505060c06126f08d828e01612082565b94505060e06127018d828e01612082565b9350506101008b013567ffffffffffffffff8111156127235761272261205c565b5b61272f8d828e01612206565b9250506101208b013567ffffffffffffffff8111156127515761275061205c565b5b61275d8d828e01612206565b9150509295989b9194979a5092959850565b600060c08201905061278460008301896120c4565b8181036020830152612796818861249d565b90506127a560408301876124d6565b81810360608301526127b7818661249d565b90506127c660808301856120c4565b6127d360a08301846120c4565b979650505050505050565b600060c08201905081810360008301526127f8818961249d565b905061280760208301886120c4565b8181036040830152612819818761249d565b905061282860608301866124d6565b61283560808301856120c4565b81810360a0830152612847818461249d565b9050979650505050505050565b6000806040838503121561286b5761286a612057565b5b600083013567ffffffffffffffff8111156128895761288861205c565b5b61289585828601612206565b925050602083013567ffffffffffffffff8111156128b6576128b561205c565b5b6128c285828601612206565b9150509250929050565b6000806000606084860312156128e5576128e4612057565b5b60006128f386828701612082565b935050602061290486828701612082565b925050604084013567ffffffffffffffff8111156129255761292461205c565b5b61293186828701612206565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061298257607f821691505b6020821081036129955761299461293b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129d582612061565b91506129e083612061565b92508282019050808211156129f8576129f761299b565b5b92915050565b6000612a0982612061565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a3b57612a3a61299b565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612aa87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a6b565b612ab28683612a6b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612aef612aea612ae584612061565b612aca565b612061565b9050919050565b6000819050919050565b612b0983612ad4565b612b1d612b1582612af6565b848454612a78565b825550505050565b600090565b612b32612b25565b612b3d818484612b00565b505050565b5b81811015612b6157612b56600082612b2a565b600181019050612b43565b5050565b601f821115612ba657612b7781612a46565b612b8084612a5b565b81016020851015612b8f578190505b612ba3612b9b85612a5b565b830182612b42565b50505b505050565b600082821c905092915050565b6000612bc960001984600802612bab565b1980831691505092915050565b6000612be28383612bb8565b9150826002028217905092915050565b612bfb82612457565b67ffffffffffffffff811115612c1457612c13612109565b5b612c1e825461296a565b612c29828285612b65565b600060209050601f831160018114612c5c5760008415612c4a578287015190505b612c548582612bd6565b865550612cbc565b601f198416612c6a86612a46565b60005b82811015612c9257848901518255600182019150602085019450602081019050612c6d565b86831015612caf5784890151612cab601f891682612bb8565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220dbb8454c12f5dd212e685ce73bb2111c7ea397d2775737f9707eb70695a313cc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1811,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_event_ids",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1813,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_nft_ids",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1815,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_bid_ids",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1817,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_feed_ids",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1822,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_event_uris",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(event_uri_struct)1768_storage)"
      },
      {
        "astId": 1827,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_nft_uris",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(nft_uri_struct)1787_storage)"
      },
      {
        "astId": 1832,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_bid_uris",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(bid_uri_struct)1800_storage)"
      },
      {
        "astId": 1837,
        "contract": "contracts/DAOAuction.sol:DAOAuction",
        "label": "_feeds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(feed_struct)1809_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(bid_uri_struct)1800_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOAuction.bid_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(bid_uri_struct)1800_storage"
      },
      "t_mapping(t_uint256,t_struct(event_uri_struct)1768_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOAuction.event_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(event_uri_struct)1768_storage"
      },
      "t_mapping(t_uint256,t_struct(feed_struct)1809_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOAuction.feed_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(feed_struct)1809_storage"
      },
      "t_mapping(t_uint256,t_struct(nft_uri_struct)1787_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAOAuction.nft_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(nft_uri_struct)1787_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(bid_uri_struct)1800_storage": {
        "encoding": "inplace",
        "label": "struct DAOAuction.bid_uri_struct",
        "members": [
          {
            "astId": 1789,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "nft_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1791,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1793,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "walletAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1795,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "bidder",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1797,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "bidder_userid",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1799,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "bidAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(event_uri_struct)1768_storage": {
        "encoding": "inplace",
        "label": "struct DAOAuction.event_uri_struct",
        "members": [
          {
            "astId": 1757,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1759,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1761,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "event_uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1763,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "event_wallet",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1765,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "raised",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1767,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(feed_struct)1809_storage": {
        "encoding": "inplace",
        "label": "struct DAOAuction.feed_struct",
        "members": [
          {
            "astId": 1802,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "feed_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1804,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "date",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1806,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "Type",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1808,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "data",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(nft_uri_struct)1787_storage": {
        "encoding": "inplace",
        "label": "struct DAOAuction.nft_uri_struct",
        "members": [
          {
            "astId": 1770,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "event_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1772,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1774,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1776,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "url",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1778,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1780,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "sender_wallet",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1782,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "highest_amount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1784,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "highest_bidder_userid",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1786,
            "contract": "contracts/DAOAuction.sol:DAOAuction",
            "label": "highest_bidder",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}